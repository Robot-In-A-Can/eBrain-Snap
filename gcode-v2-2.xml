<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="Advanced eBrain" color="0,116,143,1"/></palette><block-definition s="G-code to plotter %&apos;g-code&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>master list</l><l>x coords</l><l>y coords</l><l>previousX</l><l>previousY</l></list></block><block s="doSetVar"><l>master list</l><block s="evaluate"><block s="reportJSFunction"><list><l>gcode</l></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;}&#xD;function badParsed(val) {&#xD;  if (isNaN(val)) {&#xD;    return !(val === undefined || val === null);&#xD;  } else {&#xD;    return false;&#xD;  }&#xD;} &#xD;&#xD;var units = "mm";&#xD;// Implemented commands:&#xD;// g1 and g0: move to the specified X and Y coordinates.&#xD;// g20: inches g21: millimeters&#xD;// M2: program end&#xD;&#xD;// Unimplemented, but might implement:&#xD;// g90: absolute positioning&#xD;// g91: relative positioning&#xD;&#xD;var points = [];&#xD;var lines = gcode.split(/\r?\n/);&#xD;for (l of lines) {&#xD;  // cut comment if it exists&#xD;  if (l.includes(";")) {&#xD;    l = l.split(";")[0];&#xD;  }&#xD;  if (l.startsWith("G20")) {&#xD;    units = "inches";&#xD;  } else if (l.startsWith("G21")) {&#xD;    units = "mm";&#xD;  } else if (l.startsWith("G1") || l.startsWith("G0")) {&#xD;    var line = l.split(" ");&#xD;    var point = {};&#xD;    for (const c of line) {&#xD;      if (c.startsWith("X")) {&#xD;        point.X = parseFloat(c.substring(1));&#xD;        if (units === "inches") {&#xD;          point.X *= 25.4;&#xD;        }&#xD;      } else if (c.startsWith("Y")) {&#xD;        point.Y = parseFloat(c.substring(1));&#xD;        if (units === "inches") {&#xD;          point.Y *= 25.4;&#xD;        }&#xD;      }&#xD;    }&#xD;    // if saw an X or Y but could not parse the number, stop parsing.&#xD;    if (badParsed(point.X) || badParsed(point.Y)) {&#xD;      morphicAlert("Error!", "Invalid point " + l + " for command G1");&#xD;      return new List([]);&#xD;    } else {&#xD;      // if the G1 is missing an X or Y, silently ignore it&#xD;      if (typeof point.X === &apos;number&apos; &amp;&amp; typeof point.Y === &apos;number&apos;) {&#xD;        points.push(point);&#xD;      }&#xD;    }&#xD;  } else if (l.startsWith("M2")) {&#xD;    break; // stop job when we see M2&#xD;  }&#xD;}&#xD;if (points.length === 0) {&#xD;  morphicAlert("Error!", "No points were found in the Gcode");&#xD;  return new List([]);&#xD;}&#xD;var Xcoords = [];&#xD;var Ycoords = [];&#xD;for (const point of points) {&#xD;  Xcoords.push(point.X);&#xD;  Ycoords.push(point.Y);&#xD;}&#xD;return new List([new List(Xcoords), new List(Ycoords)]);&#xD;</l></block><list><block var="g-code"/></list></block></block><block s="doIf"><block s="reportEquals"><l>0</l><block s="reportListAttribute"><l><option>length</option></l><block var="master list"/></block></block><script><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doSetVar"><l>x coords</l><block s="reportListItem"><l>1</l><block var="master list"/></block></block><block s="doSetVar"><l>y coords</l><block s="reportListItem"><l>2</l><block var="master list"/></block></block><block s="doFor"><l>i</l><l>1</l><block s="reportListAttribute"><l><option>length</option></l><block var="x coords"/></block><script><block s="doRun"><block s="reportJSFunction"><list><l>X</l><l>Y</l></list><l>var oldPoint = world.plotterState.position;&#xD;world.plotterState.goalPoint = {"X": X, "Y": Y, "Xdir": X - oldPoint.X &gt; 0 ? 1 : -1, "Ydir": Y - oldPoint.Y &gt; 0 ? 1 : -1};</l></block><list><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block><comment w="230" collapsed="false">If paused between points, wait to unpause</comment></block><custom-block s="Move plotter to position X %n Y %n"><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block></custom-block><block s="doUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block><script><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block></block><custom-block s="Move plotter to position X %n Y %n"><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block></custom-block></script><comment w="226.66666666666669" collapsed="false">If paused in the middle of the point, wait until it&apos;s unpaused, then move the millimeters that were remaining.&#xD;The outer loop exists because someone might pause and unpause many times.</comment></block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>delete world.plotterState.goalPoint;</l></block><list></list><comment w="90" collapsed="false">Signal the end of the job</comment></block></script><scripts><script x="794.3333333333334" y="1398.5"><custom-block s="Pause ⏸️ plotter"><comment w="217.68488913868453" collapsed="false">These exist to make it easier to export plotter blocks.</comment></custom-block><custom-block s="Resume ▶️ plotter"></custom-block><custom-block s="Stop 🛑 plotter"></custom-block><custom-block s="Move plotter relative X %n Y %n"><l>0</l><l>0</l></custom-block><custom-block s="Move plotter to position X %n Y %n"><l>0</l><l>0</l></custom-block><custom-block s="Initialize plotter position to X=0 Y=0"></custom-block></script></scripts></block-definition><block-definition s="Initialize plotter position to X=0 Y=0" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;} else {&#xD;  world.plotterState.position = {X:0, Y:0};&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="Move plotter to position X %&apos;X&apos; Y %&apos;Y&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;}</l></block><list></list></block><block s="doDeclareVariables"><list><l>deltax</l><l>deltay</l></list></block><block s="doSetVar"><l>deltax</l><block s="evaluate"><block s="reportJSFunction"><list><l>X</l></list><l>return X - world.plotterState.position.X;</l></block><list><block var="X"/></list></block></block><block s="doSetVar"><l>deltay</l><block s="evaluate"><block s="reportJSFunction"><list><l>Y</l></list><l>return Y - world.plotterState.position.Y;</l></block><list><block var="Y"/></list></block></block><custom-block s="Move plotter relative X %n Y %n"><block var="deltax"/><block var="deltay"/></custom-block></script></block-definition><block-definition s="Move plotter relative X %&apos;deltax&apos; Y %&apos;deltay&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;}</l></block><list></list></block><block s="doIfElse"><block s="reportGreaterThan"><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block></block><script><custom-block s="Advanced Move Left distance: %n speed: %n Right distance: %n speed: %n"><block s="reportProduct"><l>-1</l><block var="deltax"/></block><l>1</l><block var="deltay"/><block s="reportIfElse"><block s="reportEquals"><block var="deltay"/><l>0</l></block><l>1</l><block s="reportQuotient"><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block></block></block></custom-block></script><script><custom-block s="Advanced Move Left distance: %n speed: %n Right distance: %n speed: %n"><block s="reportProduct"><l>-1</l><block var="deltax"/></block><block s="reportIfElse"><block s="reportEquals"><block var="deltax"/><l>0</l></block><l>1</l><block s="reportQuotient"><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block></block></block><block var="deltay"/><l>1</l></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list><l>deltax</l><l>deltay</l></list><l>world.plotterState.position.X += deltax;&#xD;world.plotterState.position.Y += deltay;</l></block><list><block var="deltax"/><block var="deltay"/></list></block></script></block-definition><block-definition s="Stop 🛑 plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><custom-block s="Pause ⏸️ plotter"></custom-block><block s="doStopThis"><l><option>all but this script</option></l></block><block s="doRun"><block s="reportJSFunction"><list></list><l>delete world.plotterState.pausedPosition;&#xD;delete world.plotterState.goalPoint;&#xD;world.plotterState.paused = false;</l></block><list></list></block></script></block-definition><block-definition s="Pause ⏸️ plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;}&#xD;world.plotterState.paused = true;</l></block><list></list></block><custom-block s="Pause"><comment w="583.659375" collapsed="false">pause to get the mm remaining in the current move, then stop and resume to allow the user to move the plotter manually.</comment></custom-block><custom-block s="Stop"></custom-block><custom-block s="Resume"></custom-block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.lastPausedState.leftMotorRemaining &gt; 0 &amp;&amp; eb.lastPausedState.rightMotorRemaining &gt; 0 &amp;&amp; &#xD;typeof world.plotterState.goalPoint === &apos;object&apos;;</l></block><list><custom-block s="connection object"></custom-block></list><comment w="145" collapsed="false">Check if the motors were actually moving</comment></block><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>var goalPoint = world.plotterState.goalPoint;&#xD;// Save the plotter&apos;s current position&#xD;world.plotterState.position.X = goalPoint.X - (goalPoint.Xdir * eb.lastPausedState.leftMotorRemaining);&#xD;world.plotterState.position.Y = goalPoint.Y - (goalPoint.Ydir * eb.lastPausedState.rightMotorRemaining);&#xD;// Save the current, paused position. This is where the plotter will return to when unpaused.&#xD;world.plotterState.pausedPosition = {};&#xD;world.plotterState.pausedPosition.X = world.plotterState.position.X;&#xD;world.plotterState.pausedPosition.Y = world.plotterState.position.Y;</l></block><list><custom-block s="connection object"></custom-block></list></block></script></block></script></block-definition><block-definition s="Resume ▶️ plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>if (typeof world.plotterState === &apos;undefined&apos;) {&#xD;  world.plotterState = {paused: false, position:{X:0, Y:0}};&#xD;}</l></block><list></list></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === true &amp;&amp;&#xD;typeof world.plotterState.pausedPosition === &apos;object&apos;;</l></block><list></list></block><script><custom-block s="Move plotter to position X %n Y %n"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.pausedPosition.X;</l></block><list></list></block><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.pausedPosition.Y;</l></block><list></list></block></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>delete world.plotterState.pausedPosition;&#xD;world.plotterState.paused = false;</l></block><list></list></block></script></block-definition></blocks>
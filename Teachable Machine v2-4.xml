<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="Advanced eBrain" color="0,116,143,1"/></palette><block-definition s="Run Teachable Sound Machine Model %&apos;URL&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="Load Morphic Alert"></custom-block><custom-block s="addJS %s"><block s="reportJoinWords"><list><l>teachableSoundURL = "</l><block var="URL"/><l>";</l></list></block></custom-block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (typeof teachableSoundMachineAdded === &apos;undefined&apos;)</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>morphicAlert("Loading", "Adding Teachable Sound Machine Model to SNAP", "Wait, then when you see the request for your microphone, accept. Then, the model has loaded successfully.");</l></block><list></list></block><custom-block s="addJS URL %s"><l>https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js</l></custom-block><custom-block s="addJS URL %s"><l>https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js</l></custom-block><custom-block s="addJS %s"><l>let soundModel, soundClassLabels;&#xD;const soundPredictionList=[];&#xD;async function soundInit() {&#xD;    try { // stop old model if it&apos;s running.&#xD;        if (soundModel === &apos;object&apos;) {&#xD;            soundModel.stopListening();&#xD;            soundPredictionList.length = 0;&#xD;        }&#xD;    } catch (e) {}&#xD;    const a=teachableSoundURL+"model.json",t=teachableSoundURL+"metadata.json";&#xD;    soundModel = speechCommands.create("BROWSER_FFT", null, a, t);&#xD;    await soundModel.ensureModelLoaded();&#xD;    soundClassLabels = soundModel.wordLabels();&#xD;    await soundModel.listen(function(result) {&#xD;        for (let i = 0;i &lt; soundClassLabels.length; i++) {&#xD;            soundPredictionList[i] = result.scores[i].toFixed(2);&#xD;        }&#xD;    }, {&#xD;            includeSpectrogram: false, // in case listen should return result.spectrogram&#xD;            probabilityThreshold: 0.75,&#xD;            invokeCallbackOnNoiseAndUnknown: true,&#xD;            overlapFactor: 0.50 // probably want between 0.5 and 0.75. More info in README&#xD;        });&#xD;}</l></custom-block><custom-block s="addJS %s"><l>let teachableSoundMachineAdded = 1;</l></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.moveon = 0;&#xD;soundInit().catch(function(e) {&#xD;  if (e.toString().includes("Permission")) {&#xD;    morphicAlert("Error!", "An error has occurred, you may have forgotten to allow your microphone access.");&#xD;  } else {&#xD;    morphicAlert("Error!", "Some error has occurred: " + e);&#xD;  }&#xD;  console.log(e);&#xD;}).then(function(){world.moveon = 1;});</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon == 1;</l></block><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return soundPredictionList.length &gt; 0;</l></block><list></list></block></block></script></block-definition><block-definition s="addJS %&apos;JS_FILE&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>JS_FILE</l></list><l>var po = document.createElement(&apos;script&apos;);&#xD;po.type = &apos;text/javascript&apos;;&#xD;po.async = true;&#xD;po.innerHTML = JS_FILE;&#xD;var s = document.getElementsByTagName(&apos;script&apos;)[0];&#xD;s.parentNode.insertBefore(po, s)</l></block><list><block var="JS_FILE"/></list></block></script></block-definition><block-definition s="addJS URL %&apos;url&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>url</l></list><l>world.moveon = 0;&#xD;var po = document.createElement(&apos;script&apos;);&#xD;po.type = &apos;text/javascript&apos;;&#xD;po.async = true;&#xD;po.src = url;&#xD;po.addEventListener(&apos;load&apos;, function (e) { world.moveon = 1;}, false);&#xD;&#xD;var s = document.getElementsByTagName(&apos;script&apos;)[0];&#xD;s.parentNode.insertBefore(po, s)</l></block><list><block var="url"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon == 1;</l></block><list></list></block></block></script></block-definition><block-definition s="Run Teachable Image Machine Model %&apos;URL&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="addJS %s"><block s="reportJoinWords"><list><l>teachableURL = "</l><block var="URL"/><l>";</l></list></block></custom-block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return (typeof teachableMachineAdded === &apos;undefined&apos;)</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("Please Wait -- Adding Teachable Machine Model to SNAP -- When you see the request for your webcam or microphone, then the model has loaded successfully\nPress OK and wait.");</l></block><list></list></block><custom-block s="addJS URL %s"><l>https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js</l></custom-block><custom-block s="addJS URL %s"><l>https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js</l></custom-block><custom-block s="addJS %s"><l>let model,webcam,labelContainer,maxPredictions;const predictionList=[];async function init(){const a=teachableURL+"model.json",t=teachableURL+"metadata.json";model=await tmImage.load(a,t),maxPredictions=model.getTotalClasses();webcam=new tmImage.Webcam(200,200,!0),await webcam.setup(),await webcam.play(),window.requestAnimationFrame(loop)}async function loop(){webcam.update(),await predict(),window.requestAnimationFrame(loop)}async function predict(){const a=await model.predict(webcam.canvas);for(let t=0;t&lt;maxPredictions;t++){const e=a[t].probability.toFixed(2);predictionList[t]=e}}</l></custom-block><custom-block s="addJS %s"><l>let teachableMachineAdded = 1;</l></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.moveon = 0;&#xD;init().catch(function(e) {&#xD;  if (typeof e === &apos;string&apos; &amp;&amp; (e.includes("camera"))) {&#xD;    alert("An error has occurred, you may have forgotten to allow your camera access.");&#xD;  } else {&#xD;    alert("Some other error has occurred: " + e);&#xD;  }&#xD;  console.log(e);&#xD;}).then(function(){world.moveon = 1;});</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon == 1;</l></block><list></list></block></block></script></block-definition><block-definition s="Image Class %&apos;i&apos; Confidence Level" type="reporter" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">1</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><block s="reportJoinWords"><list><l>return predictionList[</l><block s="reportDifference"><block var="i"/><l>1</l></block><l>]</l></list></block></block><list></list></block></block></script></block-definition><block-definition s="open in new tab URL: %&apos;url&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>url</l></list><l>window.open(url,&apos;_blank&apos;);</l></block><list><block var="url"/></list></block></script></block-definition><block-definition s="Sound Class %&apos;class&apos; Confidence Level" type="reporter" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%code"><options>function() {&#xD;  try {&#xD;    out = {};&#xD;    for (const label of soundClassLabels) {&#xD;      out[label] = label;&#xD;    }&#xD;    return out;&#xD;  } catch (e) {&#xD;    return {};&#xD;  }&#xD;}</options></input></inputs><script><custom-block s="Load Morphic Alert"></custom-block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>soundClass</l></list><l>try {&#xD;  var prediction = soundPredictionList[soundClassLabels.indexOf(soundClass)];&#xD;  if (!prediction) {&#xD;    if (soundPredictionList.length === 0) {&#xD;      morphicAlert("Error!", "The sound model is stopped. Start it before continuing.");&#xD;    } else if (!soundClass) {&#xD;      morphicAlert("Error!", "Select a class before using this block.");&#xD;    } else {&#xD;      morphicAlert("Error!", "The class name appears to be wrong. Correct it before continuing");&#xD;    }&#xD;  }&#xD;  return prediction;&#xD;} catch (e) {&#xD;  morphicAlert("Error!", "You must load a sound model before using the confidence level");&#xD;}</l></block><list><block var="class"/></list></block></block></script></block-definition><block-definition s="Stop Teachable Sound Machine Model" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;  soundModel.stopListening();&#xD;  soundPredictionList.length = 0;&#xD;} catch (e) {&#xD;  console.error(e);&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="Load Morphic Alert" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return typeof morphicAlert === &apos;function&apos; &amp;&amp; typeof morphicAlertString === &apos;function&apos; &amp;&amp; typeof activeAlerts === &apos;object&apos;;</l></block><list></list></block></block><script><custom-block s="addJS %s"><l>// https://forum.snap.berkeley.edu/t/how-do-i-make-a-dialog-box-with-custom-buttons/6347/4&#xD;/**&#xD; * Creates a morhpic dialog and shows it to the user, with one &apos;Close&apos; button.&#xD; * If there is another alert with the same title and message, this one will not be shown.&#xD; * NOTE: this uses non bold text, otherwise the text is clipped.&#xD; * @param {string} title Title for the dialog&#xD; * @param {String} message Rest parameters of lines to show in the body of the dialog.&#xD; * If it does not contain Strings, calls toString on it.&#xD; */&#xD;function morphicAlert(title, ...messages) {&#xD;  if (Array.isArray(messages) &amp;&amp; messages.length &gt; 0) {&#xD;    var message = "";&#xD;    for (var i = 0; i &lt; messages.length - 1; i++) {&#xD;      message += messages[i] + "\n";&#xD;    }&#xD;    message += messages[messages.length - 1];&#xD;    morphicAlertString(title, message);&#xD;  } else if (typeof messages === "string") {&#xD;    morphicAlertString(title, messages);&#xD;  } else if (messages === null || messages === undefined) {&#xD;    morphicAlertString(title, "[Error message is missing. Please report that this happened to the developers.]");&#xD;  } else {&#xD;    morphicAlertString(title, messages.toString());&#xD;  }&#xD;}&#xD;&#xD;var activeAlerts = new Map();&#xD;&#xD;/**&#xD; * Creates a morhpic dialog and shows it to the user, with one &apos;Close&apos; button.&#xD; * NOTE: use morphicAlert instead, it has more robust type checking.&#xD; * @param {string} title Title for the dialog&#xD; * @param {string} message Message in the body of the dialog&#xD; */&#xD; function morphicAlertString(title, message) {&#xD;  var alertContents = title + message;&#xD;  if (activeAlerts.get(alertContents) !== undefined) {&#xD;    // don&apos;t create a dialog if an identical one exists.&#xD;    return;&#xD;  }&#xD;&#xD;  let box = new DialogBoxMorph(); // make dialog&#xD;  // add label (in the weirdest way imaginable)&#xD;  box.labelString = title;&#xD;  box.createLabel();&#xD;  const addLabel = function (text, type) {&#xD;    let txt = new TextMorph(text);&#xD;    // Text should be bold to match the snap style but has to be &#xD;    // false here, otherwise the text overflows.&#xD;    txt.isBold = false;&#xD;    box[&apos;add&apos; + type](txt);&#xD;  }&#xD;  addLabel(message, &apos;Body&apos;) // do not change the second input of these&#xD;  box.titleBarColor = new Color(255, 0, 0, 1); // Make titlebar red&#xD;  box.titlePadding = 12; // make titlebar taller&#xD;&#xD;  // Add this box to the activeAlerts map, and make the close button work.&#xD;  activeAlerts.set(alertContents, box);&#xD;  box.cancelAndProcess = function() {&#xD;    box.ok();&#xD;    activeAlerts.delete(alertContents);&#xD;  }&#xD;  // This button will close the dialog and remove it from the list of active alerts&#xD;  box.addButton(&apos;cancelAndProcess&apos;, &apos;Close&apos;);&#xD;  box.fixLayout(); // required, otherwise box looks weird&#xD;  box.popUp(world); // popup box&#xD;}&#xD;</l></custom-block></script></block></script></block-definition></blocks>
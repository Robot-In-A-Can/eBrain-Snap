<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="Advanced eBrain" color="0,116,143,1"/></palette><block-definition s="G-code to plotter %&apos;g-code&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>world.plotterState.inJob = true;</l></block><list></list></block><block s="doDeclareVariables"><list><l>master list</l><l>x coords</l><l>y coords</l><l>previousX</l><l>previousY</l></list></block><block s="doSetVar"><l>master list</l><block s="evaluate"><block s="reportJSFunction"><list><l>gcode</l><l>wheelDiameter</l><l>stepsPerTurn</l></list><l>return gcodeToPoints(gcode, wheelDiameter, stepsPerTurn);</l></block><list><block var="g-code"/><custom-block s="Get Config Value %s"><l>wheelDiameter</l></custom-block><custom-block s="Get Config Value %s"><l>stepsPerTurn</l></custom-block></list></block></block><block s="doIf"><block s="reportEquals"><l>0</l><block s="reportListAttribute"><l><option>length</option></l><block var="master list"/></block></block><script><block s="doStopThis"><l><option>this block</option></l></block></script></block><block s="doSetVar"><l>x coords</l><block s="reportListItem"><l>1</l><block var="master list"/></block></block><block s="doSetVar"><l>y coords</l><block s="reportListItem"><l>2</l><block var="master list"/></block></block><block s="doFor"><l>i</l><l>1</l><block s="reportListAttribute"><l><option>length</option></l><block var="x coords"/></block><script><block s="doRun"><block s="reportJSFunction"><list><l>X</l><l>Y</l></list><l>world.plotterState.setGoalPoint(X, Y);</l></block><list><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block><comment w="230" collapsed="false">If paused between points, wait to unpause</comment></block><custom-block s="Move plotter to position X %n Y %n Unit: %s"><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block><l>steps</l></custom-block><block s="doUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block><script><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === false;</l></block><list></list></block></block><custom-block s="Move plotter to position X %n Y %n Unit: %s"><block s="reportListItem"><block var="i"/><block var="x coords"/></block><block s="reportListItem"><block var="i"/><block var="y coords"/></block><l>steps</l></custom-block></script><comment w="226.66666666666669" collapsed="false">If paused in the middle of the point, wait until it&apos;s unpaused, then move the millimeters that were remaining.&#xD;The outer loop exists because someone might pause and unpause many times.</comment></block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>world.plotterState.inJob = false;</l></block><list></list></block></script><scripts><script x="594.3333333333336" y="751.0000000000001"><custom-block s="Pause ⏸️ plotter"><comment w="217.68488913868453" collapsed="false">These exist to make it easier to export plotter blocks.</comment></custom-block><custom-block s="Resume ▶️ plotter"></custom-block><custom-block s="Stop 🛑 plotter"></custom-block><custom-block s="Move plotter relative X %n Y %n Unit: %s"><l>0</l><l>0</l><l></l></custom-block><custom-block s="Move plotter to position X %n Y %n Unit: %s"><l>0</l><l>0</l><l></l></custom-block><custom-block s="Initialize plotter position to X=0 Y=0"></custom-block></script></scripts></block-definition><block-definition s="Initialize plotter position to X=0 Y=0" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doRun"><block s="reportJSFunction"><list></list><l>world.plotterState.position = new PlotterCoordinate();</l></block><list></list></block></script></block-definition><block-definition s="PlotterJS" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><l>function gcodeToPoints(gcode, wheelDiameter, stepsPerTurn) {&#xD;  function badParsed(val) {&#xD;    if (isNaN(val)) {&#xD;      return !(val === undefined || val === null);&#xD;    } else {&#xD;      return false;&#xD;    }&#xD;  } &#xD;&#xD;  var units = "mm";&#xD;  // Implemented commands:&#xD;  // g1 and g0: move to the specified X and Y coordinates.&#xD;  // g20: inches g21: millimeters&#xD;  // M2: program end&#xD;&#xD;  // Unimplemented, but might implement:&#xD;  // g90: absolute positioning&#xD;  // g91: relative positioning&#xD;&#xD;  var points = [];&#xD;  var lines = gcode.split(/\r?\n/);&#xD;  for (l of lines) {&#xD;    // cut comment if it exists&#xD;    if (l.includes(";")) {&#xD;      l = l.split(";")[0];&#xD;    }&#xD;    if (l.startsWith("G20")) {&#xD;      units = "inches";&#xD;    } else if (l.startsWith("G21")) {&#xD;      units = "mm";&#xD;    } else if (l.startsWith("G1") || l.startsWith("G0")) {&#xD;      var line = l.split(" ");&#xD;      var point = {};&#xD;      for (const c of line) {&#xD;        if (c.startsWith("X")) {&#xD;          point.X = parseFloat(c.substring(1));&#xD;          if (units === "inches") {&#xD;            point.X *= 25.4;&#xD;          }&#xD;        } else if (c.startsWith("Y")) {&#xD;          point.Y = parseFloat(c.substring(1));&#xD;          if (units === "inches") {&#xD;            point.Y *= 25.4;&#xD;          }&#xD;        }&#xD;      }&#xD;      // if saw an X or Y but could not parse the number, stop parsing.&#xD;      if (badParsed(point.X) || badParsed(point.Y)) {&#xD;        morphicAlert("Error!", "Invalid point " + l + " for command G1");&#xD;        return new List([]);&#xD;      } else {&#xD;        // if the G1 is missing an X or Y, silently ignore it&#xD;        if (typeof point.X === &apos;number&apos; &amp;&amp; typeof point.Y === &apos;number&apos;) {&#xD;          points.push(point);&#xD;        }&#xD;      }&#xD;    } else if (l.startsWith("M2")) {&#xD;      break; // stop job when we see M2&#xD;    }&#xD;  }&#xD;  if (points.length === 0) {&#xD;    morphicAlert("Error!", "No points were found in the Gcode");&#xD;    return new List([]);&#xD;  }&#xD;  var Xcoords = [];&#xD;  var Ycoords = [];&#xD;  for (const point of points) {&#xD;    Xcoords.push(Math.round(convertMMToSteps(point.X, wheelDiameter, stepsPerTurn)));&#xD;    Ycoords.push(Math.round(convertMMToSteps(point.Y, wheelDiameter, stepsPerTurn)));&#xD;  }&#xD;  return new List([new List(Xcoords), new List(Ycoords)]);&#xD;}&#xD;&#xD;&#xD;PlotterState = function() {&#xD;  this.paused = false;&#xD;  this.position = new PlotterCoordinate();&#xD;  // both of these are only used by the gcode code,&#xD;  // so they are in STEPS only.&#xD;  this.goalPoint = new GoalPoint(new PlotterCoordinate(), 0, 0);&#xD;  this.pausedPosition = {X:0, Y:0};&#xD;  this.inJob = false;&#xD;  this.savePausedPosition = function(eb) {&#xD;    // Save the plotter&apos;s current position into its tracked position.&#xD;    // Note that the plotter is allowed to move between paused and unpaused.&#xD;    this.position.X.setSteps(this.goalPoint.X - (this.goalPoint.Xdir * eb.lastPausedState.leftMotorRemaining));&#xD;    this.position.Y.setSteps(this.goalPoint.Y - (this.goalPoint.Ydir * eb.lastPausedState.rightMotorRemaining));&#xD;    // Save the current, paused position. This is where the plotter will return to when unpaused.&#xD;    this.pausedPosition = {};&#xD;    this.pausedPosition.X = this.position.X.getSteps();&#xD;    this.pausedPosition.Y = this.position.Y.getSteps();&#xD;  }&#xD;  this.setGoalPoint = function(X, Y) {&#xD;    this.goalPoint = new GoalPoint(this.position, X, Y);&#xD;  }&#xD;}&#xD;&#xD;PlotterCoordinate = function() {&#xD;  this.X = new PlotterValue();&#xD;  this.Y = new PlotterValue();&#xD;}&#xD;function GoalPoint(position, X, Y) {&#xD;  this.Xdir = X - position.X.getSteps() &gt; 0 ? 1 : -1;&#xD;  this.Ydir = Y - position.Y.getSteps() &gt; 0 ? 1 : -1;&#xD;  this.X = X;&#xD;  this.Y = Y;&#xD;}&#xD;&#xD;const PlotterValueProto = {&#xD;  setSteps: function(value) {&#xD;    this.value = value;&#xD;  },&#xD;  getSteps: function() {&#xD;    return this.value;&#xD;  },&#xD;  incrementSteps: function(value) {&#xD;    this.value += value;&#xD;  },&#xD;  setMM: function(value, wheelDiameter, stepsPerTurn) {&#xD;    this.value = convertMMToSteps(value, wheelDiameter, stepsPerTurn);&#xD;  },&#xD;  getMM: function(wheelDiameter, stepsPerTurn) {&#xD;    return convertStepsToMM(this.value, wheelDiameter, stepsPerTurn);&#xD;  },&#xD;  incrementMM: function(value, wheelDiameter, stepsPerTurn) {&#xD;    this.value += convertMMToSteps(value, wheelDiameter, stepsPerTurn);&#xD;  }&#xD;}&#xD;&#xD;function PlotterValue() {&#xD;  this.value = 0;&#xD;}&#xD;&#xD;PlotterValue.prototype = PlotterValueProto;&#xD;PlotterValue.prototype.constructor = PlotterValue;&#xD;&#xD;function convertMMToSteps(value, wheelDiameter, stepsPerTurn) {&#xD;  return value * (stepsPerTurn / (Math.PI * wheelDiameter));&#xD;}&#xD;&#xD;function convertStepsToMM(value, wheelDiameter, stepsPerTurn) {&#xD;  return value / (stepsPerTurn / (Math.PI * wheelDiameter));&#xD;}&#xD;// Create the plotter state object&#xD;world.plotterState = new PlotterState();&#xD;&#xD;world.modifiedPlotter = true;</l></block></script></block-definition><block-definition s="Move plotter to position X %&apos;X&apos; Y %&apos;Y&apos; Unit: %&apos;unit&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">0</input><input type="%s" readonly="true">mm<options>mm&#xD;steps</options></input></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doDeclareVariables"><list><l>deltax</l><l>deltay</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="unit"/><l>steps</l></block><script><block s="doSetVar"><l>deltax</l><block s="evaluate"><block s="reportJSFunction"><list><l>X</l></list><l>return X - world.plotterState.position.X.getSteps();</l></block><list><block var="X"/></list></block></block><block s="doSetVar"><l>deltay</l><block s="evaluate"><block s="reportJSFunction"><list><l>Y</l></list><l>return Y - world.plotterState.position.Y.getSteps();</l></block><list><block var="Y"/></list></block></block></script><script><block s="doSetVar"><l>deltax</l><block s="evaluate"><block s="reportJSFunction"><list><l>X</l><l>wheelDiameter</l><l>stepsPerTurn</l></list><l>return X - world.plotterState.position.X.getMM(wheelDiameter, stepsPerTurn);</l></block><list><block var="X"/><custom-block s="Get Config Value %s"><l>wheelDiameter</l></custom-block><custom-block s="Get Config Value %s"><l>stepsPerTurn</l></custom-block></list></block></block><block s="doSetVar"><l>deltay</l><block s="evaluate"><block s="reportJSFunction"><list><l>Y</l><l>wheelDiameter</l><l>stepsPerTurn</l></list><l>return Y - world.plotterState.position.Y.getMM(wheelDiameter, stepsPerTurn);</l></block><list><block var="Y"/><custom-block s="Get Config Value %s"><l>wheelDiameter</l></custom-block><custom-block s="Get Config Value %s"><l>stepsPerTurn</l></custom-block></list></block></block></script></block><custom-block s="Move plotter relative X %n Y %n Unit: %s"><block var="deltax"/><block var="deltay"/><block var="unit"/></custom-block></script></block-definition><block-definition s="Move plotter relative X %&apos;deltax&apos; Y %&apos;deltay&apos; Unit: %&apos;unit&apos;" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">0</input><input type="%s" readonly="true">mm<options>mm&#xD;steps</options></input></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doIfElse"><block s="reportGreaterThan"><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block></block><script><custom-block s="Advanced Move: Left amount %n speed: %n Right amount %n speed: %n Unit: %s"><block s="reportProduct"><l>-1</l><block var="deltax"/></block><l>1</l><block var="deltay"/><block s="reportIfElse"><block s="reportEquals"><block var="deltay"/><l>0</l></block><l>1</l><block s="reportQuotient"><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block></block></block><block var="unit"/></custom-block></script><script><custom-block s="Advanced Move: Left amount %n speed: %n Right amount %n speed: %n Unit: %s"><block s="reportProduct"><l>-1</l><block var="deltax"/></block><block s="reportIfElse"><block s="reportEquals"><block var="deltax"/><l>0</l></block><l>1</l><block s="reportQuotient"><block s="reportMonadic"><l><option>abs</option></l><block var="deltax"/></block><block s="reportMonadic"><l><option>abs</option></l><block var="deltay"/></block></block></block><block var="deltay"/><l>1</l><block var="unit"/></custom-block></script></block><block s="doIfElse"><block s="reportEquals"><block var="unit"/><l>steps</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l>deltax</l><l>deltay</l><l>unit</l></list><l>world.plotterState.position.X.incrementSteps(deltax);&#xD;world.plotterState.position.Y.incrementSteps(deltay);</l></block><list><block var="deltax"/><block var="deltay"/></list></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>deltax</l><l>deltay</l><l>wheelDiameter</l><l>stepsPerTurn</l></list><l>var position = world.plotterState.position;&#xD;position.X.incrementMM(deltax, wheelDiameter, stepsPerTurn);&#xD;position.Y.incrementMM(deltay, wheelDiameter, stepsPerTurn);</l></block><list><block var="deltax"/><block var="deltay"/><custom-block s="Get Config Value %s"><l>wheelDiameter</l></custom-block><custom-block s="Get Config Value %s"><l>stepsPerTurn</l></custom-block></list></block></script></block></script></block-definition><block-definition s="Stop 🛑 plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><custom-block s="Pause ⏸️ plotter"></custom-block><block s="doStopThis"><l><option>all but this script</option></l></block><block s="doRun"><block s="reportJSFunction"><list></list><l>delete world.plotterState.pausedPosition;&#xD;delete world.plotterState.goalPoint;&#xD;world.plotterState.paused = false;</l></block><list></list></block></script></block-definition><block-definition s="Pause ⏸️ plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="world modified"></custom-block></block><script><custom-block s="addJS %s"><custom-block s="eBrainJS"></custom-block></custom-block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.modified = 1;</l></block><list></list></block></script><comment w="479.8294270833335" collapsed="false">Add the ebrain JS if needed, so that morphic alert will be available.</comment></block><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doIfElse"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.plotterState.inJob === true;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>world.plotterState.paused = true;</l></block><list></list></block><custom-block s="Pause"><comment w="583.659375" collapsed="false">pause to get the mm remaining in the current move, then stop and resume to allow the user to move the plotter manually.</comment></custom-block><custom-block s="Stop"></custom-block><custom-block s="Resume"></custom-block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.lastPausedState.leftMotorRemaining &gt; 0 || eb.lastPausedState.rightMotorRemaining &gt; 0;</l><comment w="145" collapsed="false">Check if the motors were actually moving</comment></block><list><custom-block s="connection object"></custom-block></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.plotterState.savePausedPosition(eb);</l></block><list><custom-block s="connection object"></custom-block></list></block></script></block></script><script><block s="doRun"><block s="reportJSFunction"><list></list><l>morphicAlert("ERROR!", "Plotter is not in a job, so cannot pause or stop it. Use the regular stop or pause blocks");</l></block><list></list></block></script></block></script></block-definition><block-definition s="Resume ▶️ plotter" type="command" category="Advanced eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportNot"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modifiedPlotter === true;</l></block><list></list></block></block><script><custom-block s="addJS %s"><custom-block s="PlotterJS"></custom-block></custom-block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.paused === true;</l></block><list></list></block><script><custom-block s="Move plotter to position X %n Y %n Unit: %s"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.pausedPosition.X;</l></block><list></list></block><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.plotterState.pausedPosition.Y;</l></block><list></list></block><l>steps</l></custom-block><block s="doRun"><block s="reportJSFunction"><list></list><l>world.plotterState.paused = false;</l></block><list></list></block></script></block></script></block-definition></blocks>
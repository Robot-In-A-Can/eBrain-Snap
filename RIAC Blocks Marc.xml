<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="RIAC" color="216,45,45,1"/><category name="eBrain" color="33,33,33,1"/></palette><block-definition s="connect to IP %&apos;ip&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><block s="reportJoinWords"><list><l>if (eb == null ) {eb = new EveBrain(&apos;ws://</l><block var="ip"/><l>:8899/websocket&apos;);&#xD;console.log(eb.connected);&#xD;} else {&#xD;if (eb.connected == false) {&#xD;eb.url= "ws://</l><block var="ip"/><l>:8899/websocket";  eb.connect();}}</l></list></block></block><list></list></block></script></block-definition><block-definition s="connect USB" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>USBconnect();&#xD;ebUSB = new EveBrainUSB();</l></block><list></list></block></script></block-definition><block-definition s="connected" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>&#xD;try {&#xD;  if ((eb != undefined ? eb.connected : false) || (ebUSB != undefined ? ebUSB.connected : false)){&#xD;    return true; &#xD;  } else {&#xD;    return false;&#xD;  }&#xD;} catch(e) {&#xD;  return false;&#xD;}</l></block><list></list></block></block></script></block-definition><block-definition s="test connection" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;&#xD;  if ((eb != undefined ? eb.connected : false) || (ebUSB != undefined)){&#xD;    //it thinks its connected over websock, let&apos;s test the connection&#xD;   if (eb != undefined ? eb.connected : false) {&#xD;     eb.connected = false;&#xD;     eb.version(function(status,msg){eb.connected = true;});&#xD;   } else {&#xD;     //it thinks we are connected over USB&#xD;     ebUSB.testConnection();&#xD;   } &#xD;  }&#xD;} catch(e) {&#xD;  console.log(e);&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="Connect to eBrain %&apos;ip&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">USB<options>USB&#xD;WIFI =192.168.4.1</options></input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="world modified"></custom-block></block><script><custom-block s="addJS %s"><custom-block s="eBrainJS"></custom-block></custom-block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.modified = 1;</l></block><list></list></block></script></block><custom-block s="test connection"></custom-block><block s="doWait"><l>0.1</l></block><block s="doIf"><block s="reportNot"><custom-block s="connected"></custom-block></block><script><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;http:&apos;</l></block><list></list></block><script><block s="doIfElse"><block var="ip"/><script><custom-block s="connect to IP %s"><block var="ip"/></custom-block></script><script><custom-block s="connect"></custom-block></script></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;https:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port = &apos;&apos;;</l></block><list></list></block><custom-block s="connect USB"></custom-block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>eb == undefined;&#xD;return world.port;</l></block><list></list></block></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;file:&apos;</l></block><list></list></block><script><block s="doIfElse"><block s="reportEquals"><block var="ip"/><l>USB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port = &apos;&apos;;</l></block><list></list></block><custom-block s="connect USB"></custom-block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.port</l></block><list></list></block></block></script><script><block s="doIfElse"><block var="ip"/><script><custom-block s="connect to IP %s"><block var="ip"/></custom-block></script><script><custom-block s="connect"></custom-block></script></block></script></block></script></block><custom-block s="test connection"></custom-block><block s="doWait"><l>0.3</l></block><block s="doIf"><block s="reportNot"><custom-block s="connected"></custom-block></block><script><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;http:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("Websocket Connection Failure! \n\nEnsure you are connected to the eBrain over the network, this version of Snap (http) cannot use the USB port.\n\n See Help for more details");</l></block><list></list></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;https:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("USB Connection Failure!\n\nThis version of Snap (https) is secure and can only connect over USB, if you wish to connect using WebSockets please navigate to http.\n\nPlease connect your eBrain using a USB cable and make sure you have selected the correct port to commnicate with the eBrain");</l></block><list></list></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;file:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("Connection Failure!\n\nIn this mode you may connect via USB or over WebSocket\n\nPlease type the IP address to use WebSockets or type USB to use the USB port")</l></block><list></list></block></script></block></script></block></script></block></script></block-definition><block-definition s="eBrainJS" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><l>var escapable = /[\x00-\x1f\ud800-\udfff\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufff0-\uffff]/g;&#xD;var attempts = 0;&#xD;var eb;&#xD;var ebUSB;&#xD;&#xD;function filterUnicode(quoted){&#xD;&#xD;  escapable.lastIndex = 0;&#xD;  if( !escapable.test(quoted)) return quoted;&#xD;&#xD;  return quoted.replace( escapable, function(a){&#xD;    return &apos;&apos;;&#xD;  });&#xD;}&#xD;&#xD;/**&#xD; * ParentEveBrain has the movement functions (move, turn,&#xD; * forward, etc) and digitalInput. These functions then &#xD; * call the send function, which subclasses need to define.&#xD; * Methods required to implement: send_msg.&#xD; * &#xD; * NOTE: the API for callbacks here is: state (usually started &#xD; * or complete), message (the returned message from the robot), optional.&#xD; * Optional is not passed usually, so it is undefined (except when stop() is used).&#xD; */&#xD;var ParentEveBrain = function() {&#xD;  this.digitalSensor = [];&#xD;  this.robot_state = &apos;idle&apos;;&#xD;  this.cbs = {};&#xD;  this.msg_stack = [];&#xD;  this.analogSensor = {level: null};&#xD;  this.distanceSensor = {level: null};&#xD;  this.tempSensor = {level: null};&#xD;  this.humidSensor = {level: null};&#xD;  this.config = null;&#xD;  this.sensorState = {follow: null, collide: null}; // can potentially remove follow,collide&#xD;}&#xD;&#xD;ParentEveBrain.prototype = {&#xD;  constructor: ParentEveBrain,&#xD;&#xD;  /**&#xD;   * Deals with the callback, and queues up the message to be sent to ebrain.&#xD;   * If the command is not &apos;important&apos; (ie not &apos;stop&apos;, etc) it is queued up.&#xD;   * The subclasses must call process_msg_queue when the robot is idle to&#xD;   * make sure queued messages are indeed sent, and must shift() the queue once &#xD;   * a response is received.&#xD;   * @param msg Message to send&#xD;   * @param cb callback for message&#xD;   */&#xD;  send: function(msg, cb){&#xD;    msg = filterUnicode(msg);&#xD;    msg.id = Math.random().toString(36).substring(2, 12);&#xD;    if(cb){&#xD;      this.cbs[msg.id] = cb;&#xD;    }&#xD;    if(msg.arg &amp;&amp; msg.arg.toString() != &apos;[object Object]&apos;) {&#xD;      msg.arg = msg.arg.toString();&#xD;    }&#xD;    if([&apos;stop&apos;, &apos;pause&apos;, &apos;resume&apos;, &apos;ping&apos;, &apos;version&apos;].indexOf(msg.cmd) &gt;= 0){&#xD;      this.send_msg(msg);&#xD;    }else{&#xD;      this.msg_stack.push(msg);&#xD;      this.process_msg_queue();&#xD;    }&#xD;  },&#xD;&#xD;  process_msg_queue: function(){&#xD;    if(this.robot_state === &apos;idle&apos; &amp;&amp; this.msg_stack.length &gt; 0){&#xD;      this.robot_state = &apos;receiving&apos;;&#xD;      this.send_msg(this.msg_stack[0]);&#xD;    }&#xD;  },&#xD;&#xD;  clearMessagesCallbacks: function() {&#xD;    this.cbs = {};&#xD;    this.msg_stack = [];&#xD;  },&#xD;&#xD;  stop: function(){&#xD;    var self = this;&#xD;    this.send({cmd:&apos;stop&apos;}, function(state, msg, recursion){&#xD;      if(state === &apos;complete&apos; &amp;&amp; !recursion){&#xD;        for(var i in self.cbs){&#xD;          // console.log(&apos;calling callback &apos; + self.cbs[i]);&#xD;          self.cbs[i](&apos;complete&apos;, undefined, true);&#xD;        }&#xD;        self.robot_state = &apos;idle&apos;;&#xD;        self.clearMessagesCallbacks();&#xD;      }&#xD;    });&#xD;  },&#xD;  /**&#xD;   * Initiates wifi scan.&#xD;   * @param {function} callback Called when info on the WiFi networks is received.&#xD;   */&#xD;  wifiScan: function(callback) {&#xD;    var self = this;&#xD;    this.send({cmd: "startWifiScan"}, null); // don&apos;t need a callback when the scan has started&#xD;    this.cbs[&apos;wifiScan&apos;] = function(state, message) {&#xD;      callback(state, message); // chain given callback&#xD;    }&#xD;  },&#xD;&#xD;  connect_to_network: function(SSID, PASS, callback) {&#xD;    this.send({cmd: &apos;setConfig&apos;, arg: {sta_ssid: SSID, sta_pass: PASS}}, callback);&#xD;  },&#xD;&#xD;  digitalInput: function(pin_number, cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;digitalInput&apos;, arg:pin_number}, function(state, msg){&#xD;      cb(state, msg);&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.digitalSensor[pin_number] = msg.msg;&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  analogInput: function(pin_number, cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;analogInput&apos;, arg:pin_number}, function(state, msg){&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.analogSensor.level = msg.msg;&#xD;        cb(state, msg);&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  gpio: function(pin, pin_state, cb){&#xD;    this.send({cmd: pin_state[0], arg:pin}, cb);&#xD;  },&#xD;&#xD;  gpio_pwm: function(pin_select,pin_value, cb){&#xD;    this.send({cmd: pin_select, arg:pin_value}, cb);&#xD;  },&#xD;&#xD;  distanceInput: function(cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;distanceSensor&apos;}, function(state, msg){&#xD;      cb(state, msg);&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.distanceSensor.level = msg.msg;&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  temperature: function(cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;temperature&apos;}, function(state, msg){&#xD;      cb(state, msg);&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.tempSensor.level = msg.msg;&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  humidity: function(cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;humidity&apos;}, function(state, msg){&#xD;      cb(state, msg);&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.humidSensor.level = msg.msg;&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  beep: function(note,duration,cb){&#xD;    this.send({cmd: &apos;beep&apos; , arg: [note, duration*1000]}, cb);&#xD;  },&#xD;&#xD;  getConfig: function(callback) {&#xD;    var self = this;&#xD;    this.send({cmd: &apos;getConfig&apos;}, function(state, msg) {&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.config = msg.msg;&#xD;      }&#xD;      callback(state, msg);&#xD;    });&#xD;  },&#xD;&#xD;  setServo: function(servoNum, angle, callback) {&#xD;    if (servoNum == 1) { // This is delierately a loose comparison&#xD;      this.send({cmd: "servo", arg: angle}, callback);&#xD;    } else if (servoNum == 2) {&#xD;      this.send({cmd: "servoII", arg: angle}, callback);&#xD;    }&#xD;  },&#xD;&#xD;  move: function(direction, distance, cb){&#xD;    // If we pass this first check, distance is a number or a string parseable as such&#xD;    if (!(typeof distance === &apos;number&apos; || !isNaN(distance))) {&#xD;      throw new Error(&apos;The distance must be a number&apos;);&#xD;    } else if (+distance &lt; 0) {&#xD;      throw new Error(&apos;For this command, distance must be positive.&apos;);&#xD;    }&#xD;    this.send({cmd: direction, arg: distance}, cb);&#xD;  },&#xD;&#xD;  turn: function(direction, angle, cb){&#xD;    this.send({cmd: direction, arg: angle}, cb);&#xD;  },&#xD;&#xD;  forward: function(distance, cb){&#xD;    this.move(&apos;forward&apos;, distance, cb);&#xD;  },&#xD;&#xD;  back: function(distance, cb){&#xD;    this.move(&apos;back&apos;, distance, cb);&#xD;  },&#xD;&#xD;  left: function(distance, cb){&#xD;    this.move(&apos;right&apos;, distance, cb);&#xD;  },&#xD;&#xD;  right: function(distance, cb){&#xD;    this.move(&apos;left&apos;, distance, cb);&#xD;  },&#xD;&#xD;  leftMotorForward: function(distance, cb){&#xD;    this.move(&apos;leftMotorF&apos;, distance, cb);&#xD;  },&#xD;&#xD;  rightMotorForward: function(distance, cb){&#xD;    this.move(&apos;rightMotorF&apos;, distance, cb);&#xD;  },&#xD;&#xD;  &#xD;  leftMotorBackward: function(distance, cb){&#xD;    this.move(&apos;leftMotorB&apos;, distance, cb);&#xD;  },&#xD;&#xD;  rightMotorBackward: function(distance, cb){&#xD;    this.move(&apos;rightMotorB&apos;, distance, cb);&#xD;  },&#xD;&#xD;  arc: function(angle,radius,repeat,cb){&#xD;    this.send({cmd: &apos;arc&apos; , arg:[angle,radius,repeat]}, cb);&#xD;  }&#xD;}&#xD;&#xD;&#xD;var EveBrain = function(url){&#xD;  ParentEveBrain.call(this);&#xD;  this.url = url;&#xD;  this.connect();&#xD;  this.cbs = {};&#xD;  this.listeners = [];&#xD;  this.wifiNetworks = {};&#xD;}&#xD;&#xD;EveBrain.prototype = {&#xD;&#xD;  connected: false,&#xD;  error: false,&#xD;  timeoutTimer: undefined,&#xD;&#xD;  connect: function(){&#xD;    if(!this.connected &amp;&amp; !this.error){&#xD;      var self = this;&#xD;      try { &#xD;        //clear any previous websockets and clear msg queue and all timers&#xD;        clearTimeout(self.timeoutTimer);&#xD;        clearTimeout(self.connTimeout);&#xD;        clearTimeout(self.reconnectTimer);&#xD;        self.ws.close();&#xD;        self.robot_state = &apos;idle&apos;;&#xD;        self.msg_stack = [];&#xD;        self.cbs = {};&#xD;      }&#xD;      catch(error) {&#xD;        console.log(error);&#xD;      }&#xD;      this.has_connected = false;&#xD;      this.ws = filterUnicode(new WebSocket(this.url));&#xD;      this.ws.onmessage = function(ws_msg){self.handle_ws(ws_msg)};&#xD;      this.ws.onopen = function(){&#xD;        self.version(function(){&#xD;          self.setConnectedState(true);&#xD;          attempts = 0;&#xD;        });&#xD;      }&#xD;      this.ws.onerror = function(err){self.handleError(err); attempts += 1;}&#xD;      this.ws.onclose = function(err){self.handleError(err); attempts += 1;}&#xD;      if (attempts &lt; 10) {&#xD;        this.connTimeout = window.setTimeout(function(){&#xD;          if(!self.connected){&#xD;            try { &#xD;              self.ws.close();;&#xD;            }&#xD;            catch(error) {&#xD;              console.log(error);&#xD;            }&#xD;          } &#xD;        }, 1000);&#xD;      }&#xD;    }&#xD;  },&#xD;&#xD;  refresh: function(){&#xD;    var self = this;&#xD;    self.ws.close();&#xD;    clearTimeout(self.connTimeout);&#xD;    self.robot_state = &apos;idle&apos;;&#xD;    self.msg_stack = [];&#xD;    self.cbs = {};&#xD;    this.has_connected = false;&#xD;    this.ws = filterUnicode(new WebSocket(this.url));&#xD;    this.ws.onmessage = function(ws_msg){self.handle_ws(ws_msg)};&#xD;    this.ws.onopen = function(){&#xD;      self.version(function(){&#xD;        self.setConnectedState(true);&#xD;      });&#xD;    }&#xD;    this.ws.onerror = function(err){self.handleError(err)}&#xD;    this.ws.onclose = function(err){self.handleError(err)}&#xD;  },&#xD;&#xD;  setConnectedState: function(state){&#xD;    var self = this;&#xD;    clearTimeout(self.connTimeout);&#xD;    self.connected = state;&#xD;    if(state){ self.has_connected = true; }&#xD;    if(self.has_connected){&#xD;      setTimeout(function(){&#xD;        self.broadcast(self.connected ? &apos;connected&apos; : &apos;disconnected&apos;);&#xD;      }, 100);&#xD;    }&#xD;    // Try to auto reconnect if disconnected&#xD;    if(state){&#xD;      if(self.reconnectTimer){&#xD;        clearTimeout(self.reconnectTimer);&#xD;        self.reconnectTimer = undefined;&#xD;      }&#xD;    }else{&#xD;      if(!self.reconnectTimer &amp;&amp; attempts &lt; 10){&#xD;          self.reconnectTimer = setTimeout(function(){&#xD;          self.reconnectTimer = undefined;&#xD;          self.connect();&#xD;        }, 1000);&#xD;      }&#xD;    }&#xD;  },&#xD;&#xD;  broadcast: function(msg){&#xD;    for(i in this.listeners){&#xD;      if(this.listeners.hasOwnProperty(i)){&#xD;        this.listeners[i](msg);&#xD;      }&#xD;    }&#xD;  },&#xD;&#xD;  addListener: function(listener){&#xD;    this.listeners.push(listener);&#xD;  },&#xD;&#xD;  handleError: function(err){&#xD;    if(err instanceof CloseEvent || err === &apos;Timeout&apos;){&#xD;      if(this.ws.readyState === WebSocket.OPEN){&#xD;        this.ws.close()&#xD;      }&#xD;      this.setConnectedState(false);&#xD;      clearTimeout(self.reconnectTimer);&#xD;      self.reconnectTimer = undefined;&#xD;      this.msg_stack = [];&#xD;    }else{&#xD;      console.log(err);&#xD;    }&#xD;  },&#xD;&#xD;  // note: many functions are in the ParentEveBrain.&#xD;&#xD;  //EveOneCommands&#xD;&#xD;  analogInputPCF: function(pin_number, cb){&#xD;    var self = this;&#xD;    this.send({cmd: &apos;readSensors&apos;, arg:pin_number}, function(state, msg){&#xD;      if(state === &apos;complete&apos; &amp;&amp; undefined != msg){&#xD;        self.analogSensor.level = msg.msg;&#xD;        cb(self.analogSensor.level);&#xD;      }&#xD;    });&#xD;  },&#xD;&#xD;  servo: function(angle, cb){&#xD;    this.send({cmd: &apos;servo&apos;, arg:angle}, cb);&#xD;  },&#xD;&#xD;  pause: function(cb){&#xD;    this.send({cmd:&apos;pause&apos;}, cb);&#xD;  },&#xD;&#xD;  resume: function(cb){&#xD;    this.send({cmd:&apos;resume&apos;}, cb);&#xD;  },&#xD;&#xD;  ping: function(cb){&#xD;    this.send({cmd:&apos;ping&apos;}, cb);&#xD;  },&#xD;&#xD;  version: function(cb){&#xD;    this.send({cmd:&apos;version&apos;}, cb);&#xD;  },&#xD;&#xD;  send_msg: function(msg){&#xD;    var self = this;&#xD;    msg = filterUnicode(msg);&#xD;    console.log(msg);&#xD;    if(this.ws.readyState === WebSocket.OPEN){&#xD;      this.ws.send(JSON.stringify(msg));&#xD;    }&#xD;    this.timeoutTimer = window.setTimeout(function(){ self.handleError("Timeout") }, 3000);&#xD;  },&#xD;&#xD;  handle_ws: function(ws_msg){&#xD;    if (typeof ws_msg != &apos;undefined&apos;) {&#xD;      msg = JSON.parse(ws_msg.data);&#xD;      msg.msg = filterUnicode(msg.msg);&#xD;      msg.id = filterUnicode(msg.id);&#xD;      msg.status = filterUnicode(msg.status);&#xD;      console.log(msg);&#xD;      clearTimeout(this.timeoutTimer);&#xD;      if(msg.status === &apos;notify&apos;){&#xD;        this.broadcast(msg.id);&#xD;        this.sensorState[msg.id] = msg.msg;&#xD;        if (this.cbs[msg.id]) {&#xD;          this.cbs[msg.id](&apos;notify&apos;, msg);&#xD;          delete this.cbs[msg.id];&#xD;        }&#xD;        return;&#xD;      }&#xD;      if(this.msg_stack.length &gt; 0 &amp;&amp; this.msg_stack[0].id == msg.id){&#xD;        if(msg.status === &apos;accepted&apos;){&#xD;          if(this.cbs[msg.id]){&#xD;            this.cbs[msg.id](&apos;started&apos;, msg);&#xD;          }&#xD;          this.robot_state = &apos;running&apos;;&#xD;        }else if(msg.status === &apos;complete&apos;){&#xD;          if(this.cbs[msg.id]){&#xD;            this.cbs[msg.id](&apos;complete&apos;, msg);&#xD;            delete this.cbs[msg.id];&#xD;          }&#xD;          this.msg_stack.shift();&#xD;          if(this.msg_stack.length === 0){&#xD;            this.broadcast(&apos;program_complete&apos;);&#xD;          }&#xD;          this.robot_state = &apos;idle&apos;;&#xD;          this.process_msg_queue();&#xD;        }&#xD;      }else{&#xD;        if(this.cbs[msg.id]){&#xD;          this.cbs[msg.id](&apos;complete&apos;, msg);&#xD;          delete this.cbs[msg.id];&#xD;        }&#xD;      }&#xD;      if(msg.status &amp;&amp; msg.status === &apos;error&apos; &amp;&amp; msg.msg === &apos;Too many connections&apos;){&#xD;        this.error = true;&#xD;        this.broadcast(&apos;error&apos;);&#xD;      }&#xD;    } else {&#xD;      ws_msg.data = 0;&#xD;      ws_msg.status = 0;&#xD;      ws_msg.id = 0;&#xD;    }&#xD;  },&#xD;&#xD;  robot_state: &apos;idle&apos;,&#xD;  msg_stack: []&#xD;}&#xD;&#xD;// Add the movement functions to the EveBrain prototype&#xD;for (parentMemberName in ParentEveBrain.prototype) {&#xD;  EveBrain.prototype[parentMemberName] = ParentEveBrain.prototype[parentMemberName];&#xD;}&#xD;&#xD;&#xD;var EveBrainUSB = function() {&#xD;  ParentEveBrain.call(this);&#xD;  this.cbs = {};&#xD;  this.connected = false;&#xD;};&#xD;&#xD;EveBrainUSB.prototype = Object.create(ParentEveBrain.prototype);&#xD;Object.defineProperty(EveBrainUSB.prototype, &apos;constructor&apos;, {&#xD;  value: EveBrainUSB,&#xD;  enumerable: false,&#xD;  writable: true&#xD;});&#xD;&#xD;EveBrainUSB.prototype.send_msg = function(message, callback) {&#xD;  message = filterUnicode(message);&#xD;  writeToStream(JSON.stringify(message));&#xD;}&#xD;&#xD;/**&#xD; * Runs the callback associated with the given message and manages&#xD; * the robot&apos;s state.&#xD; * @param message Message from ebrain&#xD; */&#xD;EveBrainUSB.prototype.doCallback = function(message) {&#xD;  if(message &amp;&amp; message.status == &apos;accepted&apos;) {&#xD;    this.robot_state = &apos;running&apos;;&#xD;    if(this.cbs[message.id]){&#xD;      this.cbs[message.id](&apos;started&apos;, message);&#xD;    }&#xD;  } else if(message &amp;&amp; message.status == &apos;complete&apos;){&#xD;    if(this.cbs[message.id]){&#xD;      this.cbs[message.id](&apos;complete&apos;, message);&#xD;      delete this.cbs[message.id];&#xD;    }&#xD;    this.robot_state = &apos;idle&apos;;&#xD;    this.msg_stack.shift(); // Pop message that prompted this response off queue&#xD;    this.process_msg_queue();&#xD;  } else if(message &amp;&amp; message.status === &apos;notify&apos;){&#xD;    this.sensorState[message.id] = message.msg;&#xD;    if (this.cbs[message.id]) {&#xD;      this.cbs[message.id](&apos;notify&apos;, message);&#xD;      delete this.cbs[message.id];&#xD;    }&#xD;    return;&#xD;  }&#xD;}&#xD;&#xD;/**&#xD; * Tests the connection. If the robot is connected, will&#xD; * (async) set this.connected = true (once the robot responds).&#xD; * Sets this.connected = false at the start.&#xD; */&#xD;EveBrainUSB.prototype.testConnection = function() {&#xD;  this.connected = false;&#xD;  var self = this;&#xD;  this.send({cmd: "version"}, function(status, msg) {&#xD;    if (status === &apos;complete&apos;) {&#xD;      self.connected = true;&#xD;    }&#xD;  });&#xD;}&#xD;&#xD;let inputDone;&#xD;let outputDone;&#xD;&#xD;async function USBconnect() {&#xD;  // Request &amp; open port here.&#xD;  world.port = await navigator.serial.requestPort();&#xD;  // Wait for the port to open.&#xD;  await world.port.open({ baudRate: 230400 });&#xD;&#xD;  // Setup the output stream&#xD;  const encoder = new TextEncoderStream();&#xD;  outputDone = encoder.readable.pipeTo(world.port.writable);&#xD;  world.outputStream = encoder.writable;&#xD;&#xD;  // Make stream&#xD;  let decoder = new TextDecoderStream();&#xD;  inputDone = world.port.readable.pipeTo(decoder.writable);&#xD;  inputStream = decoder.readable;&#xD;&#xD;  world.reader = inputStream.getReader();&#xD;  readLoop(); // Start infinite read loop&#xD;}&#xD;&#xD;/**&#xD; * This reads from the serial in a loop, and &#xD; * runs the given callbacks (using ebUSB).&#xD; */&#xD;async function readLoop() {&#xD;  world.USB = &apos;&apos;;&#xD;  console.log("USB Reader Listening...");&#xD;&#xD;  while (true) {&#xD;    const { value, done } = await world.reader.read();&#xD;    if (value) {&#xD;      world.USB += value;&#xD;      console.log (value + &apos;\n&apos;);&#xD;&#xD;      // Now, I check if the JSON is complete and respond to the callback if necessary&#xD;      // and remove the message from the stack&#xD;      if (world.USB.includes(&apos;}&apos;)) {&#xD;        var messages = tryParseeBrainResponse(world.USB);&#xD;        for (var i = 0; i &lt; messages.parsed.length; i++ ) {&#xD;          var message = messages.parsed[i];&#xD;          if (ebUSB) {&#xD;            ebUSB.doCallback(message);&#xD;          }&#xD;        }&#xD;        world.USB = &apos;&apos;;&#xD;        if (messages.unparseable) {&#xD;          world.USB = messages.unparseable;&#xD;        }&#xD;      }&#xD;    }&#xD;    if (done) {&#xD;      console.log(&apos;[readLoop] DONE&apos;, done);&#xD;      world.reader.releaseLock();&#xD;      break;&#xD;    }&#xD;  }&#xD;}&#xD;&#xD;/**&#xD; * Tries to parse string as json. Also verifies that it is valid (check it has an id).&#xD; * NOTE: the json MUST end with &apos;\r\n&apos;&#xD; * @return An object of form {parsed, unparseable}, where parseable is a &#xD; * list of all parseable objects and, unparseable is a string representing what remaining&#xD; * bits couldn&apos;t be parsed (if such exists).&#xD;*/&#xD;function tryParseeBrainResponse(jsonString) {&#xD;  var out = {parsed: []};&#xD;&#xD;  // First, try and split if there are multiple objects being returned&#xD;  var jsons = jsonString.split(&apos;\r\n&apos;);&#xD;  for (var i = 0; i &lt; jsons.length; i++) {&#xD;    try {&#xD;      var response = JSON.parse(jsons[i]);&#xD;      if (response &amp;&amp; typeof response === "object" &amp;&amp; response.id) {&#xD;        out.parsed.push(response);&#xD;      }&#xD;    } catch (e) {&#xD;      // Only add a str to unparseable if it&apos;s at the end.&#xD;      if (i == jsons.length - 1) {&#xD;        out.unparseable = jsons[i];&#xD;      }&#xD;    }&#xD;  }&#xD;  return out;&#xD;}&#xD;&#xD;function writeToStream(...lines) {&#xD;  // Write to output stream&#xD;  const writer = world.outputStream.getWriter();&#xD;  lines.forEach((line) =&gt; {&#xD;    console.log(&apos;[SEND]&apos;, line);&#xD;    writer.write(line + &apos;\n&apos;);&#xD;  });&#xD;  writer.releaseLock();&#xD;}</l></block></script></block-definition><block-definition s="addJS %&apos;JS_FILE&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>JS_FILE</l></list><l>var po = document.createElement(&apos;script&apos;);&#xD;  po.type = &apos;text/javascript&apos;;&#xD;  po.async = true;&#xD;  po.innerHTML = JS_FILE;&#xD;  var s = document.getElementsByTagName(&apos;script&apos;)[0];&#xD;  s.parentNode.insertBefore(po, s)</l></block><list><block var="JS_FILE"/></list></block></script></block-definition><block-definition s="world modified" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modified == 1 || world.modified != undefined;</l></block><list></list></block></block></script></block-definition><block-definition s="Forward %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">100</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.forward(mm,function(state, msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Back %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">100</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.back(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Left %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.left(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Right %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.right(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="connect" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>if (eb == null) {&#xD;eb = new EveBrain(&apos;ws://192.168.4.1:8899/websocket&apos;);&#xD;&#xD;console.log(eb.connected);&#xD;} else {&#xD;if (eb.connected == false) {&#xD;eb.url = "ws://192.168.4.1:8899/websocket";&#xD;eb.connect();&#xD;}&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="connection type" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;  if(eb != undefined ? eb.connected : false){&#xD;    return &apos;WEB&apos;; &#xD;  }  &#xD; else if(ebUSB != undefined ? ebUSB.connected: false){&#xD;    return &apos;USB&apos;; &#xD;  }&#xD; else {&#xD;   return &apos;NONE&apos;; &#xD;  }&#xD;} catch(e) {&#xD;  return "NONE";&#xD;}</l></block><list></list></block></block></script></block-definition><block-definition s="Stop" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>eb.stop();</l></block><list><custom-block s="connection object"></custom-block></list></block></script></block-definition><block-definition s="GPIO Write Pin: %&apos;Pin&apos; %&apos;ON/OFF&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input><input type="%s" readonly="true">gpio_on<options>gpio_on&#xD;gpio_off</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>Pin</l><l>State</l><l>eb</l></list><l>world.moveon = 0;&#xD;try{&#xD;  eb.gpio(Pin,[State],function(state, msg){&#xD;    if (state == &apos;complete&apos;) {&#xD;      world.moveon = 1;&#xD;    }&#xD;  });&#xD;}&#xD;catch(e){&#xD;}</l></block><list><block var="Pin"/><block var="ON/OFF"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="GPIO Read Pin %&apos;Pin&apos;" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>Pin</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.digitalInput(Pin,function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="Pin"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>Pin</l><l>eb</l></list><l>return eb.digitalSensor[Pin];</l></block><list><block var="Pin"/><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Analog Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.analogInput(0,function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.analogSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Read Distance" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.distanceInput(function(state, msg) { &#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  eb.distanceSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Temperature Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.temperature(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.tempSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Humidity Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.humidity(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.humidSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="PWM Pin: %&apos;Pin&apos; Value (0-255): %&apos;pin_value&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">5<options>5&#xD;10&#xD;16</options></input><input type="%n">255</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>pin_value</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.gpio_pwm("gpio_pwm_" + pin, pin_value, function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="Pin"/><block var="pin_value"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Beep Pin 5 Duration: %&apos;duration&apos; Note: %&apos;note&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">1</input><input type="%n">60</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>duration</l><l>note</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.beep(note,duration,function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="duration"/><block var="note"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Connect to Network SSID: %&apos;SSID&apos; Password: %&apos;PASS&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>SSID</l><l>PASS</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.connect_to_network(SSID, PASS, function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="SSID"/><block var="PASS"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Get WiFi Networks" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.wifiScan(function(){&#xD;  world.moveon = 1;&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>&#xD;var networks = eb.sensorState["wifiScan"];&#xD;let txt = "";&#xD;for (let i = 0; i &lt; networks.length; i++){&#xD;&#xD;txt = txt.concat(networks[i][0]);&#xD;if(i != networks.length){  &#xD;  txt = txt.concat(",");}&#xD;}&#xD;return(networks);</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Set Servo %&apos;one&apos; Angle %&apos;angle&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">1<options>1&#xD;2</options></input><input type="%n">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>angle</l><l>one</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.setServo(one, angle, function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="angle"/><block var="one"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Get IP" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.config.sta_ip;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Get Config" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, message){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  JSON.stringify(eb.config);</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Get Robot Name" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  eb.config.ap_ssid;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="%&apos;motor&apos; Motor %&apos;direction&apos; %&apos;mm&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">Left<options>Left&#xD;Right</options></input><input type="%s" readonly="true">Forward<options>Forward&#xD;Back</options></input><input type="%n">100</input></inputs><script><block s="doIfElse"><block s="reportNot"><block s="reportListContainsItem"><block s="reportNewList"><list><l>Left</l><l>Right</l></list></block><block var="motor"/></block></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>alert(&apos;Must use with "Left" or "Right" motor &apos;);</l></block><list></list></block></script><script><block s="doIfElse"><block s="reportNot"><block s="reportListContainsItem"><block s="reportNewList"><list><l>Forward</l><l>Back</l></list></block><block var="direction"/></block></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>alert(&apos;Must use going "Forward" or "Backward"&apos;);</l></block><list></list></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>motor</l><l>direction</l><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;var actionStr = motor.toLowerCase() + &apos;Motor&apos; + (direction === &apos;Forward&apos; ? &apos;F&apos; : &apos;B&apos;);&#xD;eb.move(actionStr, mm, function(state, msg) {&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="motor"/><block var="direction"/><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block></script></block></script></block-definition><block-definition s="Close Connection" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>WEB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>eb.ws.close();</l></block><list></list></block></script></block><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>USB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port.close()</l></block><list></list></block></script></block></script></block-definition><block-definition s="%&apos;onOff&apos; Post to Server %&apos;server_host&apos; every %&apos;sec&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">On<options>On&#xD;Off</options></input><input type="%s">https://json.robotinacan.com/posts</input><input type="%n">10</input></inputs><script><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>WEB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l>onOff</l><l>server_host</l><l>sec</l></list><l>function isOn(){if(onOff=="On"){return 1;}return 0;}&#xD;var msg = {cmd:"postToServer", arg:{"onOff":isOn(),"server":server_host,"time":sec}, "id":Math.random().toString(36).substr(2, 10)};&#xD;msg = filterUnicode(msg);&#xD;eb.send_msg(msg);</l></block><list><block var="onOff"/><block var="server_host"/><block var="sec"/></list></block></script></block><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>USB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l>onOff</l><l>server_host</l><l>sec</l></list><l>try{&#xD;function isOn(){if(onOff=="On"){return 1;}return 0;}&#xD;writeToStream(&apos;{cmd: "postToServer", arg: {\&apos;onOff\&apos;:&apos;+isOn()+&apos;, \&apos;server\&apos;:\&apos;&apos;+server_host+&apos;\&apos;, \&apos;time\&apos;:\&apos;&apos;+sec+&apos;\&apos;}, id:"3d8d9d4f6k"}&apos;);&#xD;}&#xD;catch(e){&#xD;console.log(e);&#xD;}</l></block><list><block var="onOff"/><block var="server_host"/><block var="sec"/></list></block></script></block></script></block-definition><block-definition s="[Intuitive] Move Left Motor %&apos;LeftMM&apos; mm and Right Motor %&apos;RightMM&apos; mm" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIfElse"><block s="reportEquals"><block var="LeftMM"/><block var="RightMM"/></block><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;if (mm &gt; 0) {&#xD;    eb.forward(mm, callback);&#xD;} else {&#xD;    eb.back(-mm, callback);&#xD;}</l></block><list><block var="LeftMM"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>LeftMM</l><l>RightMM</l><l>eb</l></list><l>// Calculate the ratio between mm and degrees&#xD;var steps_per_mm = 2038.0 / 254.4;&#xD;var steps_per_degree = ((108.5 * 3.1416) / 360) * steps_per_mm;&#xD;var degrees_per_mm = steps_per_degree / steps_per_mm;&#xD;&#xD;// Find the absolute values of the distances&#xD;var absLeftMM = Math.abs(LeftMM);&#xD;var absRightMM = Math.abs(RightMM);&#xD;&#xD;world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;&#xD;// start of with moving both motors&#xD;var minDistance = Math.min(absLeftMM, absRightMM);&#xD;if (LeftMM &gt;= 0 &amp;&amp; RightMM &gt;= 0) {&#xD;    eb.forward(minDistance, callback);&#xD;} else if (LeftMM &lt;= 0 &amp;&amp; RightMM &lt;= 0) {&#xD;    eb.back(minDistance, callback);&#xD;} else if (LeftMM &gt; 0) {&#xD;    eb.right(minDistance * degrees_per_mm, callback);&#xD;} else {&#xD;    eb.left(minDistance * degrees_per_mm, callback);&#xD;}</l></block><list><block var="LeftMM"/><block var="RightMM"/><custom-block s="connection object"></custom-block></list><comment w="140.83333333333334" collapsed="false">Here, run the command to run the motors as long as the smaller distance (ie if we are moving the Left one 50mm and the Right one 80mm, move both 50mm first).</comment></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>LeftMM</l><l>RightMM</l><l>eb</l></list><l>// Calculate the ratio between mm and degrees&#xD;var steps_per_mm = 2038.0 / 254.4;&#xD;var steps_per_degree = ((108.5 * 3.1416) / 360) * steps_per_mm;&#xD;var degrees_per_mm = steps_per_degree / steps_per_mm;&#xD;// Find the absolute values of the distances&#xD;var absLeftMM = Math.abs(LeftMM);&#xD;var absRightMM = Math.abs(RightMM);&#xD;&#xD;world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;&#xD;var minDistance = Math.min(absLeftMM, absRightMM);&#xD;&#xD;&#xD;//End with moving the remaining motor the remaining distance&#xD;if (absLeftMM &gt; absRightMM) {&#xD;    var remainingDistance = absLeftMM - minDistance;&#xD;    if (LeftMM &lt; 0) {&#xD;        eb.rightMotorBackward(remainingDistance, callback);&#xD;    } else {&#xD;        eb.rightMotorForward(remainingDistance, callback);&#xD;    }&#xD;} else {&#xD;    var remainingDistance = absRightMM - minDistance;&#xD;    if (RightMM &lt; 0) {&#xD;        eb.leftMotorForward(remainingDistance, callback);&#xD;    } else {&#xD;        eb.leftMotorBackward(remainingDistance, callback);&#xD;    }&#xD;}&#xD;&#xD;</l></block><list><block var="LeftMM"/><block var="RightMM"/><custom-block s="connection object"></custom-block></list><comment w="90" collapsed="false">Here, run the motor with the longer distance to move (ie if we are moving the Left one 50mm and the Right one 80mm, now we are moving the Right one 30mm).</comment></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script><comment w="90" collapsed="false">If both distances are the same, run a forward/backwards command</comment></block></script></block-definition><block-definition s="connection object" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIfElse"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>WEB</l></block><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return eb;</l></block><list></list></block></block></script><script><block s="doIfElse"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>USB</l></block><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return ebUSB;</l></block><list></list></block></block></script><script><block s="doRun"><block s="reportJSFunction"><list></list><l>alert(&apos;You do not appear to be connected&apos;);&#xD;throw new Error(&apos;Not connected to eBrain&apos;);</l></block><list></list></block></script></block></script></block></script></block-definition></blocks>
<blocks app="Snap! 7, https://snap.berkeley.edu" version="2"><palette><category name="RIAC" color="216,45,45,1"/><category name="eBrain" color="33,33,33,1"/></palette><block-definition s="connect to IP %&apos;ip&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><block s="reportJoinWords"><list><l>if (eb == null ) {eb = new EveBrain(&apos;ws://</l><block var="ip"/><l>:8899/websocket&apos;);&#xD;console.log(eb.connected);&#xD;} else {&#xD;if (eb.connected == false) {&#xD;eb.url= "ws://</l><block var="ip"/><l>:8899/websocket";  eb.connect();}}</l></list></block></block><list></list></block></script></block-definition><block-definition s="connect USB" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>USBconnect();</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;  return world.outputStream !== undefined;&#xD;} catch (e) {&#xD;  console.log(e);&#xD;}</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>ebUSB = new EveBrainUSB();</l></block><list></list></block></script></block-definition><block-definition s="connected" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>&#xD;try {&#xD;  if ((eb != undefined ? eb.connected : false) || (ebUSB != undefined ? ebUSB.connected : false)){&#xD;    return true; &#xD;  } else {&#xD;    return false;&#xD;  }&#xD;} catch(e) {&#xD;  return false;&#xD;}</l></block><list></list></block></block></script></block-definition><block-definition s="test connection" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;&#xD;  if ((eb != undefined ? eb.connected : false) || (ebUSB != undefined)){&#xD;    //it thinks its connected over websock, let&apos;s test the connection&#xD;   if (eb != undefined ? eb.connected : false) {&#xD;     eb.connected = false;&#xD;     eb.version(function(status,msg){eb.connected = true;});&#xD;   } else {&#xD;     //it thinks we are connected over USB&#xD;     ebUSB.testConnection();&#xD;   } &#xD;  }&#xD;} catch(e) {&#xD;  console.log(e);&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="Connect to eBrain %&apos;ip&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">USB<options>USB&#xD;WIFI =192.168.4.1</options></input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="world modified"></custom-block></block><script><custom-block s="addJS %s"><custom-block s="eBrainJS"></custom-block></custom-block><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.modified = 1;</l></block><list></list></block></script></block><custom-block s="test connection"></custom-block><block s="doWait"><l>0.1</l></block><block s="doIf"><block s="reportNot"><custom-block s="connected"></custom-block></block><script><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;http:&apos;</l></block><list></list></block><script><block s="doIfElse"><block var="ip"/><script><custom-block s="connect to IP %s"><block var="ip"/></custom-block></script><script><custom-block s="connect"></custom-block></script></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;https:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port = &apos;&apos;;</l></block><list></list></block><custom-block s="connect USB"></custom-block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>eb == undefined;&#xD;return world.port;</l></block><list></list></block></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;file:&apos;</l></block><list></list></block><script><block s="doIfElse"><block s="reportEquals"><block var="ip"/><l>USB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port = &apos;&apos;;</l></block><list></list></block><custom-block s="connect USB"></custom-block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.port</l></block><list></list></block></block></script><script><block s="doIfElse"><block var="ip"/><script><custom-block s="connect to IP %s"><block var="ip"/></custom-block></script><script><custom-block s="connect"></custom-block></script></block></script></block></script></block><custom-block s="test connection"></custom-block><block s="doWait"><l>0.3</l></block><block s="doIf"><block s="reportNot"><custom-block s="connected"></custom-block></block><script><custom-block s="test connection"></custom-block><block s="doWait"><l>0.3</l></block><block s="doIf"><block s="reportNot"><custom-block s="connected"></custom-block></block><script><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;http:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("Websocket Connection Failure! \n\nEnsure you are connected to the eBrain over the network, this version of Snap (http) cannot use the USB port.\n\n See Help for more details");</l></block><list></list></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;https:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("USB Connection Failure!\n\nThis version of Snap (https) is secure and can only connect over USB, if you wish to connect using WebSockets please navigate to http.\n\nPlease connect your eBrain using a USB cable and make sure you have selected the correct port to commnicate with the eBrain");</l></block><list></list></block></script></block><block s="doIf"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return location.protocol == &apos;file:&apos;</l></block><list></list></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>alert("Connection Failure!\n\nIn this mode you may connect via USB or over WebSocket\n\nPlease type the IP address to use WebSockets or type USB to use the USB port")</l></block><list></list></block></script></block></script></block></script></block></script></block></script></block-definition><block-definition s="eBrainJS" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><l>var escapable=/[\x00-\x1f\ud800-\udfff\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufff0-\uffff]/g;var attempts=0;var eb;var ebUSB;function filterUnicode(quoted){escapable.lastIndex=0;if(!escapable.test(quoted))return quoted;return quoted.replace(escapable,function(a){return""})}var ParentEveBrain=function(){this.digitalSensor=[];this.robot_state="idle";this.cbs={};this.msg_stack=[];this.analogSensor={level:null};this.distanceSensor={level:null};this.tempSensor={level:null};this.humidSensor={level:null};this.config=null;this.sensorState={}};ParentEveBrain.prototype={constructor:ParentEveBrain,send:function(msg,cb){msg=filterUnicode(msg);msg.id=Math.random().toString(36).substring(2,12);if(cb){this.cbs[msg.id]=cb}if(msg.arg&amp;&amp;msg.arg.toString()!="[object Object]"){msg.arg=msg.arg.toString()}if(["stop","pause","resume","ping","version"].indexOf(msg.cmd)&gt;=0){this.send_msg(msg)}else{this.msg_stack.push(msg);this.process_msg_queue()}},process_msg_queue:function(){if(this.robot_state==="idle"&amp;&amp;this.msg_stack.length&gt;0){this.robot_state="receiving";this.send_msg(this.msg_stack[0])}},clearMessagesCallbacks:function(){this.cbs={};this.msg_stack=[]},stop:function(){var self=this;this.send({cmd:"stop"},function(state,msg,recursion){if(state==="complete"&amp;&amp;!recursion){for(var i in self.cbs){self.cbs[i]("complete",undefined,true)}self.robot_state="idle";self.clearMessagesCallbacks()}})},wifiScan:function(callback){var self=this;this.send({cmd:"startWifiScan"},null);this.cbs["wifiScan"]=function(state,message){callback(state,message)}},connect_to_network:function(SSID,PASS,callback){this.send({cmd:"setConfig",arg:{sta_ssid:SSID,sta_pass:PASS}},callback)},postToServer:function(onOff,server_host,sec,callback){onOff=onOff==="On"?1:0;this.send({cmd:"postToServer",arg:{onOff:onOff,server:server_host,time:sec}},callback)},digitalInput:function(pin_number,cb){var self=this;this.send({cmd:"digitalInput",arg:pin_number},function(state,msg){cb(state,msg);if(state==="complete"&amp;&amp;undefined!=msg){self.digitalSensor[pin_number]=msg.msg}})},analogInput:function(pin_number,cb){var self=this;this.send({cmd:"analogInput",arg:pin_number},function(state,msg){if(state==="complete"&amp;&amp;undefined!=msg){self.analogSensor.level=msg.msg;cb(state,msg)}})},gpio:function(pin,pin_state,cb){this.send({cmd:pin_state[0],arg:pin},cb)},gpio_pwm:function(pin_select,pin_value,cb){this.send({cmd:pin_select,arg:pin_value},cb)},distanceInput:function(cb){var self=this;this.send({cmd:"distanceSensor"},function(state,msg){cb(state,msg);if(state==="complete"&amp;&amp;undefined!=msg){self.distanceSensor.level=msg.msg}})},temperature:function(cb){var self=this;this.send({cmd:"temperature"},function(state,msg){cb(state,msg);if(state==="complete"&amp;&amp;undefined!=msg){self.tempSensor.level=msg.msg}})},humidity:function(cb){var self=this;this.send({cmd:"humidity"},function(state,msg){cb(state,msg);if(state==="complete"&amp;&amp;undefined!=msg){self.humidSensor.level=msg.msg}})},beep:function(note,duration,cb){this.send({cmd:"beep",arg:[note,duration*1e3]},cb)},getConfig:function(callback){var self=this;this.send({cmd:"getConfig"},function(state,msg){if(state==="complete"&amp;&amp;undefined!=msg){self.config=msg.msg}callback(state,msg)})},setServo:function(servoNum,angle,callback){if(servoNum==1){this.send({cmd:"servo",arg:angle},callback)}else if(servoNum==2){this.send({cmd:"servoII",arg:angle},callback)}},move:function(direction,distance,cb){if(!(typeof distance==="number"||!isNaN(distance))){throw new Error("The distance must be a number")}else if(+distance&lt;0){throw new Error("For this command, distance must be positive.")}this.send({cmd:direction,arg:distance},cb)},turn:function(direction,angle,cb){this.send({cmd:direction,arg:angle},cb)},forward:function(distance,cb){this.move("forward",distance,cb)},back:function(distance,cb){this.move("back",distance,cb)},left:function(distance,cb){this.move("right",distance,cb)},right:function(distance,cb){this.move("left",distance,cb)},leftMotorForward:function(distance,cb){this.move("leftMotorF",distance,cb)},rightMotorForward:function(distance,cb){this.move("rightMotorF",distance,cb)},leftMotorBackward:function(distance,cb){this.move("leftMotorB",distance,cb)},rightMotorBackward:function(distance,cb){this.move("rightMotorB",distance,cb)},arc:function(angle,radius,repeat,cb){this.send({cmd:"arc",arg:[angle,radius,repeat]},cb)}};var EveBrain=function(url){ParentEveBrain.call(this);this.url=url;this.connect();this.cbs={};this.listeners=[];this.wifiNetworks={}};EveBrain.prototype={connected:false,error:false,timeoutTimer:undefined,connect:function(){if(!this.connected&amp;&amp;!this.error){var self=this;try{clearTimeout(self.timeoutTimer);clearTimeout(self.connTimeout);clearTimeout(self.reconnectTimer);self.ws.close();self.robot_state="idle";self.msg_stack=[];self.cbs={}}catch(error){console.log(error)}this.has_connected=false;this.ws=filterUnicode(new WebSocket(this.url));this.ws.onmessage=function(ws_msg){self.handle_ws(ws_msg)};this.ws.onopen=function(){self.version(function(){self.setConnectedState(true);attempts=0})};this.ws.onerror=function(err){self.handleError(err);attempts+=1};this.ws.onclose=function(err){self.handleError(err);attempts+=1};if(attempts&lt;10){this.connTimeout=window.setTimeout(function(){if(!self.connected){try{self.ws.close()}catch(error){console.log(error)}}},1e3)}}},refresh:function(){var self=this;self.ws.close();clearTimeout(self.connTimeout);self.robot_state="idle";self.msg_stack=[];self.cbs={};this.has_connected=false;this.ws=filterUnicode(new WebSocket(this.url));this.ws.onmessage=function(ws_msg){self.handle_ws(ws_msg)};this.ws.onopen=function(){self.version(function(){self.setConnectedState(true)})};this.ws.onerror=function(err){self.handleError(err)};this.ws.onclose=function(err){self.handleError(err)}},setConnectedState:function(state){var self=this;clearTimeout(self.connTimeout);self.connected=state;if(state){self.has_connected=true}if(self.has_connected){setTimeout(function(){self.broadcast(self.connected?"connected":"disconnected")},100)}if(state){if(self.reconnectTimer){clearTimeout(self.reconnectTimer);self.reconnectTimer=undefined}}else{if(!self.reconnectTimer&amp;&amp;attempts&lt;10){self.reconnectTimer=setTimeout(function(){self.reconnectTimer=undefined;self.connect()},1e3)}}},broadcast:function(msg){for(i in this.listeners){if(this.listeners.hasOwnProperty(i)){this.listeners[i](msg)}}},addListener:function(listener){this.listeners.push(listener)},handleError:function(err){if(err instanceof CloseEvent||err==="Timeout"){if(this.ws.readyState===WebSocket.OPEN){this.ws.close()}this.setConnectedState(false);clearTimeout(self.reconnectTimer);self.reconnectTimer=undefined;this.msg_stack=[]}else{console.log(err)}},analogInputPCF:function(pin_number,cb){var self=this;this.send({cmd:"readSensors",arg:pin_number},function(state,msg){if(state==="complete"&amp;&amp;undefined!=msg){self.analogSensor.level=msg.msg;cb(self.analogSensor.level)}})},ping:function(cb){this.send({cmd:"ping"},cb)},version:function(cb){this.send({cmd:"version"},cb)},send_msg:function(msg){var self=this;msg=filterUnicode(msg);console.log(msg);if(this.ws.readyState===WebSocket.OPEN){this.ws.send(JSON.stringify(msg))}this.timeoutTimer=window.setTimeout(function(){self.handleError("Timeout")},3e3)},handle_ws:function(ws_msg){if(typeof ws_msg!="undefined"){msg=JSON.parse(ws_msg.data);msg.msg=filterUnicode(msg.msg);msg.id=filterUnicode(msg.id);msg.status=filterUnicode(msg.status);console.log(msg);clearTimeout(this.timeoutTimer);if(msg.status==="notify"){this.broadcast(msg.id);this.sensorState[msg.id]=msg.msg;if(this.cbs[msg.id]){this.cbs[msg.id]("notify",msg);delete this.cbs[msg.id]}return}if(this.msg_stack.length&gt;0&amp;&amp;this.msg_stack[0].id==msg.id){if(msg.status==="accepted"){if(this.cbs[msg.id]){this.cbs[msg.id]("started",msg)}this.robot_state="running"}else if(msg.status==="complete"){if(this.cbs[msg.id]){this.cbs[msg.id]("complete",msg);delete this.cbs[msg.id]}this.msg_stack.shift();if(this.msg_stack.length===0){this.broadcast("program_complete")}this.robot_state="idle";this.process_msg_queue()}}else{if(this.cbs[msg.id]){this.cbs[msg.id]("complete",msg);delete this.cbs[msg.id]}}if(msg.status&amp;&amp;msg.status==="error"&amp;&amp;msg.msg==="Too many connections"){this.error=true;this.broadcast("error")}}else{ws_msg.data=0;ws_msg.status=0;ws_msg.id=0}},robot_state:"idle",msg_stack:[]};for(parentMemberName in ParentEveBrain.prototype){EveBrain.prototype[parentMemberName]=ParentEveBrain.prototype[parentMemberName]}var EveBrainUSB=function(){ParentEveBrain.call(this);this.cbs={};this.connected=false};EveBrainUSB.prototype=Object.create(ParentEveBrain.prototype);Object.defineProperty(EveBrainUSB.prototype,"constructor",{value:EveBrainUSB,enumerable:false,writable:true});EveBrainUSB.prototype.send_msg=function(message,callback){message=filterUnicode(message);writeToStream(JSON.stringify(message))};EveBrainUSB.prototype.doCallback=function(message){if(message&amp;&amp;message.status=="accepted"){this.robot_state="running";if(this.cbs[message.id]){this.cbs[message.id]("started",message)}}else if(message&amp;&amp;message.status=="complete"){if(this.cbs[message.id]){this.cbs[message.id]("complete",message);delete this.cbs[message.id]}this.robot_state="idle";this.msg_stack.shift();this.process_msg_queue()}else if(message&amp;&amp;message.status==="notify"){this.sensorState[message.id]=message.msg;if(this.cbs[message.id]){this.cbs[message.id]("notify",message);delete this.cbs[message.id]}return}};EveBrainUSB.prototype.testConnection=function(){this.connected=false;var self=this;this.send({cmd:"version"},function(status,msg){if(status==="complete"){self.connected=true}})};let inputDone;let outputDone;world.outputStream=undefined;async function USBconnect(){world.port=await navigator.serial.requestPort();await world.port.open({baudRate:230400});const encoder=new TextEncoderStream;outputDone=encoder.readable.pipeTo(world.port.writable);world.outputStream=encoder.writable;let decoder=new TextDecoderStream;inputDone=world.port.readable.pipeTo(decoder.writable);inputStream=decoder.readable;world.reader=inputStream.getReader();readLoop()}async function readLoop(){world.USB="";console.log("USB Reader Listening...");while(true){const{value,done}=await world.reader.read();if(value){world.USB+=value;console.log(value+"\n");if(world.USB.includes("}")){var messages=tryParseeBrainResponse(world.USB);for(var i=0;i&lt;messages.parsed.length;i++){var message=messages.parsed[i];if(ebUSB){ebUSB.doCallback(message)}}world.USB="";if(messages.unparseable){world.USB=messages.unparseable}}}if(done){console.log("[readLoop] DONE",done);world.reader.releaseLock();break}}}function tryParseeBrainResponse(jsonString){var out={parsed:[]};var jsons=jsonString.split("\r\n");for(var i=0;i&lt;jsons.length;i++){try{var response=JSON.parse(jsons[i]);if(response&amp;&amp;typeof response==="object"&amp;&amp;response.id){out.parsed.push(response)}}catch(e){if(i==jsons.length-1){out.unparseable=jsons[i]}}}return out}function writeToStream(...lines){const writer=world.outputStream.getWriter();lines.forEach(line=&gt;{console.log("[SEND]",line);writer.write(line+"\n")});writer.releaseLock()}</l></block></script></block-definition><block-definition s="addJS %&apos;JS_FILE&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>JS_FILE</l></list><l>var po = document.createElement(&apos;script&apos;);&#xD;  po.type = &apos;text/javascript&apos;;&#xD;  po.async = true;&#xD;  po.innerHTML = JS_FILE;&#xD;  var s = document.getElementsByTagName(&apos;script&apos;)[0];&#xD;  s.parentNode.insertBefore(po, s)</l></block><list><block var="JS_FILE"/></list></block></script></block-definition><block-definition s="world modified" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.modified == 1 || world.modified != undefined;</l></block><list></list></block></block></script></block-definition><block-definition s="Forward %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">100</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.forward(mm,function(state, msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Back %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">100</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.back(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Left %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.left(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Right %&apos;mm&apos;" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs><input type="%s">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.right(mm,function(state,msg){&#xD;  if(state == &apos;complete&apos;){&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="connect" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>if (eb == null) {&#xD;eb = new EveBrain(&apos;ws://192.168.4.1:8899/websocket&apos;);&#xD;&#xD;console.log(eb.connected);&#xD;} else {&#xD;if (eb.connected == false) {&#xD;eb.url = "ws://192.168.4.1:8899/websocket";&#xD;eb.connect();&#xD;}&#xD;}</l></block><list></list></block></script></block-definition><block-definition s="connection type" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>try {&#xD;  if(eb != undefined ? eb.connected : false){&#xD;    return &apos;WEB&apos;; &#xD;  }  &#xD; else if(ebUSB != undefined ? ebUSB.connected: false){&#xD;    return &apos;USB&apos;; &#xD;  }&#xD; else {&#xD;   return &apos;NONE&apos;; &#xD;  }&#xD;} catch(e) {&#xD;  return "NONE";&#xD;}</l></block><list></list></block></block></script></block-definition><block-definition s="Stop" type="command" category="RIAC"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>eb.stop();</l></block><list><custom-block s="connection object"></custom-block></list></block></script></block-definition><block-definition s="GPIO Write Pin: %&apos;Pin&apos; %&apos;ON/OFF&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input><input type="%s" readonly="true">gpio_on<options>gpio_on&#xD;gpio_off</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>Pin</l><l>State</l><l>eb</l></list><l>world.moveon = 0;&#xD;try{&#xD;  eb.gpio(Pin,[State],function(state, msg){&#xD;    if (state == &apos;complete&apos;) {&#xD;      world.moveon = 1;&#xD;    }&#xD;  });&#xD;}&#xD;catch(e){&#xD;}</l></block><list><block var="Pin"/><block var="ON/OFF"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="GPIO Read Pin %&apos;Pin&apos;" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">4<options>4&#xD;5&#xD;10&#xD;16&#xD;14&#xD;12&#xD;13&#xD;0&#xD;2</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>Pin</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.digitalInput(Pin,function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="Pin"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>Pin</l><l>eb</l></list><l>return eb.digitalSensor[Pin];</l></block><list><block var="Pin"/><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Analog Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.analogInput(0,function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.analogSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Read Distance" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.distanceInput(function(state, msg) { &#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  eb.distanceSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Temperature Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.temperature(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.tempSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Humidity Read" type="reporter" category="eBrain"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.humidity(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.humidSensor.level;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="PWM Pin: %&apos;Pin&apos; Value (0-255): %&apos;pin_value&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">5<options>5&#xD;10&#xD;16</options></input><input type="%n">255</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>pin_value</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.gpio_pwm("gpio_pwm_" + pin, pin_value, function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="Pin"/><block var="pin_value"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Beep Pin 5 Duration: %&apos;duration&apos; Note: %&apos;note&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%n">1</input><input type="%n">60</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>duration</l><l>note</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.beep(note,duration,function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="duration"/><block var="note"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Connect to Network SSID: %&apos;SSID&apos; Password: %&apos;PASS&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>SSID</l><l>PASS</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.connect_to_network(SSID, PASS, function(state, msg){&#xD;  if (state == &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="SSID"/><block var="PASS"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Get WiFi Networks" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.wifiScan(function(){&#xD;  world.moveon = 1;&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>&#xD;var networks = eb.sensorState["wifiScan"];&#xD;let txt = "";&#xD;for (let i = 0; i &lt; networks.length; i++){&#xD;&#xD;txt = txt.concat(networks[i][0]);&#xD;if(i != networks.length){  &#xD;  txt = txt.concat(",");}&#xD;}&#xD;return(networks);</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Set Servo %&apos;one&apos; Angle %&apos;angle&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">1<options>1&#xD;2</options></input><input type="%n">90</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>angle</l><l>one</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.setServo(one, angle, function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="angle"/><block var="one"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="Get IP" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return eb.config.sta_ip;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Get Config" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, message){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  JSON.stringify(eb.config);</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="Get Robot Name" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>eb</l></list><l>world.moveon = 0;&#xD;eb.getConfig(function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>eb</l></list><l>return  eb.config.ap_ssid;</l></block><list><custom-block s="connection object"></custom-block></list></block></block></script></block-definition><block-definition s="%&apos;motor&apos; Motor %&apos;direction&apos; %&apos;mm&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">Left<options>Left&#xD;Right</options></input><input type="%s" readonly="true">Forward<options>Forward&#xD;Back</options></input><input type="%n">100</input></inputs><script><block s="doIfElse"><block s="reportNot"><block s="reportListContainsItem"><block s="reportNewList"><list><l>Left</l><l>Right</l></list></block><block var="motor"/></block></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>alert(&apos;Must use with "Left" or "Right" motor &apos;);</l></block><list></list></block></script><script><block s="doIfElse"><block s="reportNot"><block s="reportListContainsItem"><block s="reportNewList"><list><l>Forward</l><l>Back</l></list></block><block var="direction"/></block></block><script><block s="doRun"><block s="reportJSFunction"><list></list><l>alert(&apos;Must use going "Forward" or "Backward"&apos;);</l></block><list></list></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>motor</l><l>direction</l><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;var actionStr = motor.toLowerCase() + &apos;Motor&apos; + (direction === &apos;Forward&apos; ? &apos;F&apos; : &apos;B&apos;);&#xD;eb.move(actionStr, mm, function(state, msg) {&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="motor"/><block var="direction"/><block var="mm"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script></block></script></block></script></block-definition><block-definition s="Close Connection" type="command" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>WEB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>eb.ws.close();</l></block><list></list></block></script></block><block s="doIf"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>USB</l></block><script><block s="doRun"><block s="reportJSFunction"><list><l></l></list><l>world.port.close()</l></block><list></list></block></script></block></script></block-definition><block-definition s="%&apos;onOff&apos; Post to Server %&apos;server_host&apos; every %&apos;sec&apos;" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">On<options>On&#xD;Off</options></input><input type="%s">https://json.robotinacan.com/posts</input><input type="%n">10</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>onOff</l><l>server_host</l><l>sec</l><l>eb</l></list><l>world.moveon = 0;&#xD;eb.postToServer(onOff, server_host, sec, function(state, msg){&#xD;  if (state === &apos;complete&apos;) {&#xD;    world.moveon = 1;&#xD;  }&#xD;});</l></block><list><block var="onOff"/><block var="server_host"/><block var="sec"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>return world.moveon;</l></block><list></list></block></block></script></block-definition><block-definition s="[Intuitive] Move Left Motor %&apos;LeftMM&apos; mm and Right Motor %&apos;RightMM&apos; mm" type="command" category="eBrain"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIfElse"><block s="reportEquals"><block var="LeftMM"/><block var="RightMM"/></block><script><block s="doRun"><block s="reportJSFunction"><list><l>mm</l><l>eb</l></list><l>world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;if (mm &gt; 0) {&#xD;    eb.forward(mm, callback);&#xD;} else {&#xD;    eb.back(-mm, callback);&#xD;}</l></block><list><block var="LeftMM"/><custom-block s="connection object"></custom-block></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script><script><block s="doRun"><block s="reportJSFunction"><list><l>LeftMM</l><l>RightMM</l><l>eb</l></list><l>// Calculate the ratio between mm and degrees&#xD;var steps_per_mm = 2038.0 / 254.4;&#xD;var steps_per_degree = ((108.5 * 3.1416) / 360) * steps_per_mm;&#xD;var degrees_per_mm = steps_per_degree / steps_per_mm;&#xD;&#xD;// Find the absolute values of the distances&#xD;var absLeftMM = Math.abs(LeftMM);&#xD;var absRightMM = Math.abs(RightMM);&#xD;&#xD;world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;&#xD;// start of with moving both motors&#xD;var minDistance = Math.min(absLeftMM, absRightMM);&#xD;if (LeftMM &gt;= 0 &amp;&amp; RightMM &gt;= 0) {&#xD;    eb.forward(minDistance, callback);&#xD;} else if (LeftMM &lt;= 0 &amp;&amp; RightMM &lt;= 0) {&#xD;    eb.back(minDistance, callback);&#xD;} else if (LeftMM &gt; 0) {&#xD;    eb.right(minDistance * degrees_per_mm, callback);&#xD;} else {&#xD;    eb.left(minDistance * degrees_per_mm, callback);&#xD;}</l></block><list><block var="LeftMM"/><block var="RightMM"/><custom-block s="connection object"></custom-block></list><comment w="140.83333333333334" collapsed="false">Here, run the command to run the motors as long as the smaller distance (ie if we are moving the Left one 50mm and the Right one 80mm, move both 50mm first).</comment></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block><block s="doRun"><block s="reportJSFunction"><list><l>LeftMM</l><l>RightMM</l><l>eb</l></list><l>// Calculate the ratio between mm and degrees&#xD;var steps_per_mm = 2038.0 / 254.4;&#xD;var steps_per_degree = ((108.5 * 3.1416) / 360) * steps_per_mm;&#xD;var degrees_per_mm = steps_per_degree / steps_per_mm;&#xD;// Find the absolute values of the distances&#xD;var absLeftMM = Math.abs(LeftMM);&#xD;var absRightMM = Math.abs(RightMM);&#xD;&#xD;world.moveon = 0;&#xD;var callback = function(state, msg) {&#xD;    if (state === &apos;complete&apos;) {&#xD;        world.moveon = 1;&#xD;    }&#xD;};&#xD;&#xD;var minDistance = Math.min(absLeftMM, absRightMM);&#xD;&#xD;&#xD;//End with moving the remaining motor the remaining distance&#xD;if (absLeftMM &gt; absRightMM) {&#xD;    var remainingDistance = absLeftMM - minDistance;&#xD;    if (LeftMM &lt; 0) {&#xD;        eb.rightMotorBackward(remainingDistance, callback);&#xD;    } else {&#xD;        eb.rightMotorForward(remainingDistance, callback);&#xD;    }&#xD;} else {&#xD;    var remainingDistance = absRightMM - minDistance;&#xD;    if (RightMM &lt; 0) {&#xD;        eb.leftMotorForward(remainingDistance, callback);&#xD;    } else {&#xD;        eb.leftMotorBackward(remainingDistance, callback);&#xD;    }&#xD;}&#xD;&#xD;</l></block><list><block var="LeftMM"/><block var="RightMM"/><custom-block s="connection object"></custom-block></list><comment w="90" collapsed="false">Here, run the motor with the longer distance to move (ie if we are moving the Left one 50mm and the Right one 80mm, now we are moving the Right one 30mm).</comment></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return world.moveon;</l></block><list></list></block></block></script><comment w="90" collapsed="false">If both distances are the same, run a forward/backwards command</comment></block></script></block-definition><block-definition s="connection object" type="reporter" category="other"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIfElse"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>WEB</l></block><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return eb;</l></block><list></list></block></block></script><script><block s="doIfElse"><block s="reportEquals"><custom-block s="connection type"></custom-block><l>USB</l></block><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return ebUSB;</l></block><list></list></block></block></script><script><block s="doRun"><block s="reportJSFunction"><list></list><l>throw new Error(&apos;Not connected to eBrain&apos;);</l></block><list></list></block></script></block></script></block></script></block-definition></blocks>